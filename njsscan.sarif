{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "nodejsscan",
          "rules": [
            {
              "id": "node_jwt_none_algorithm",
              "name": "NodeJwtNoneAlgorithm",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_jwt_none_algorithm"
            },
            {
              "id": "jwt_exposed_credentials",
              "name": "JwtExposedCredentials",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#jwt_exposed_credentials"
            },
            {
              "id": "jwt_exposed_data",
              "name": "JwtExposedData",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#jwt_exposed_data"
            },
            {
              "id": "jwt_not_revoked",
              "name": "JwtNotRevoked",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#jwt_not_revoked"
            },
            {
              "id": "hardcoded_jwt_secret",
              "name": "HardcodedJwtSecret",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#hardcoded_jwt_secret"
            },
            {
              "id": "jwt_express_hardcoded",
              "name": "JwtExpressHardcoded",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#jwt_express_hardcoded"
            },
            {
              "id": "playwright_ssrf",
              "name": "PlaywrightSsrf",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#playwright_ssrf"
            },
            {
              "id": "phantom_ssrf",
              "name": "PhantomSsrf",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#phantom_ssrf"
            },
            {
              "id": "wkhtmltoimage_ssrf",
              "name": "WkhtmltoimageSsrf",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#wkhtmltoimage_ssrf"
            },
            {
              "id": "puppeteer_ssrf",
              "name": "PuppeteerSsrf",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#puppeteer_ssrf"
            },
            {
              "id": "node_ssrf",
              "name": "NodeSsrf",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_ssrf"
            },
            {
              "id": "wkhtmltopdf_ssrf",
              "name": "WkhtmltopdfSsrf",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#wkhtmltopdf_ssrf"
            },
            {
              "id": "node_nosqli_js_injection",
              "name": "NodeNosqliJsInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_nosqli_js_injection"
            },
            {
              "id": "node_sqli_injection",
              "name": "NodeSqliInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_sqli_injection"
            },
            {
              "id": "node_nosqli_injection",
              "name": "NodeNosqliInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_nosqli_injection"
            },
            {
              "id": "node_md5",
              "name": "NodeMd5",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_md5"
            },
            {
              "id": "node_sha1",
              "name": "NodeSha1",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_sha1"
            },
            {
              "id": "node_aes_ecb",
              "name": "NodeAesEcb",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_aes_ecb"
            },
            {
              "id": "node_weak_crypto",
              "name": "NodeWeakCrypto",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_weak_crypto"
            },
            {
              "id": "node_insecure_random_generator",
              "name": "NodeInsecureRandomGenerator",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_insecure_random_generator"
            },
            {
              "id": "node_timing_attack",
              "name": "NodeTimingAttack",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_timing_attack"
            },
            {
              "id": "node_tls_reject",
              "name": "NodeTlsReject",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_tls_reject"
            },
            {
              "id": "node_curl_ssl_verify_disable",
              "name": "NodeCurlSslVerifyDisable",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_curl_ssl_verify_disable"
            },
            {
              "id": "regex_dos",
              "name": "RegexDos",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#regex_dos"
            },
            {
              "id": "express_bodyparser",
              "name": "ExpressBodyparser",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#express_bodyparser"
            },
            {
              "id": "regex_injection_dos",
              "name": "RegexInjectionDos",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#regex_injection_dos"
            },
            {
              "id": "layer7_object_dos",
              "name": "Layer7ObjectDos",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#layer7_object_dos"
            },
            {
              "id": "buffer_noassert",
              "name": "BufferNoassert",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#buffer_noassert"
            },
            {
              "id": "xss_disable_mustache_escape",
              "name": "XssDisableMustacheEscape",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#xss_disable_mustache_escape"
            },
            {
              "id": "express_xss",
              "name": "ExpressXss",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#express_xss"
            },
            {
              "id": "xss_serialize_javascript",
              "name": "XssSerializeJavascript",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#xss_serialize_javascript"
            },
            {
              "id": "handlebars_safestring",
              "name": "HandlebarsSafestring",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#handlebars_safestring"
            },
            {
              "id": "handlebars_noescape",
              "name": "HandlebarsNoescape",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#handlebars_noescape"
            },
            {
              "id": "squirrelly_autoescape",
              "name": "SquirrellyAutoescape",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#squirrelly_autoescape"
            },
            {
              "id": "xxe_xml2json",
              "name": "XxeXml2json",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#xxe_xml2json"
            },
            {
              "id": "node_xxe",
              "name": "NodeXxe",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_xxe"
            },
            {
              "id": "node_entity_expansion",
              "name": "NodeEntityExpansion",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_entity_expansion"
            },
            {
              "id": "node_xpath_injection",
              "name": "NodeXpathInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_xpath_injection"
            },
            {
              "id": "xxe_sax",
              "name": "XxeSax",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#xxe_sax"
            },
            {
              "id": "xxe_expat",
              "name": "XxeExpat",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#xxe_expat"
            },
            {
              "id": "generic_cors",
              "name": "GenericCors",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#generic_cors"
            },
            {
              "id": "express_cors",
              "name": "ExpressCors",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#express_cors"
            },
            {
              "id": "generic_header_injection",
              "name": "GenericHeaderInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#generic_header_injection"
            },
            {
              "id": "cookie_session_default",
              "name": "CookieSessionDefault",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_default"
            },
            {
              "id": "cookie_session_no_secure",
              "name": "CookieSessionNoSecure",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_no_secure"
            },
            {
              "id": "cookie_session_no_samesite",
              "name": "CookieSessionNoSamesite",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_no_samesite"
            },
            {
              "id": "cookie_session_no_httponly",
              "name": "CookieSessionNoHttponly",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_no_httponly"
            },
            {
              "id": "cookie_session_no_domain",
              "name": "CookieSessionNoDomain",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_no_domain"
            },
            {
              "id": "cookie_session_no_path",
              "name": "CookieSessionNoPath",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_no_path"
            },
            {
              "id": "cookie_session_no_expires",
              "name": "CookieSessionNoExpires",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#cookie_session_no_expires"
            },
            {
              "id": "host_header_injection",
              "name": "HostHeaderInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#host_header_injection"
            },
            {
              "id": "header_xss_lusca",
              "name": "HeaderXssLusca",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#header_xss_lusca"
            },
            {
              "id": "header_xss_generic",
              "name": "HeaderXssGeneric",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#header_xss_generic"
            },
            {
              "id": "helmet_feature_disabled",
              "name": "HelmetFeatureDisabled",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#helmet_feature_disabled"
            },
            {
              "id": "join_resolve_path_traversal",
              "name": "JoinResolvePathTraversal",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#join_resolve_path_traversal"
            },
            {
              "id": "generic_path_traversal",
              "name": "GenericPathTraversal",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#generic_path_traversal"
            },
            {
              "id": "zip_path_overwrite",
              "name": "ZipPathOverwrite",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#zip_path_overwrite"
            },
            {
              "id": "zip_path_overwrite2",
              "name": "ZipPathOverwrite2",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#zip_path_overwrite2"
            },
            {
              "id": "admzip_path_overwrite",
              "name": "AdmzipPathOverwrite",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#admzip_path_overwrite"
            },
            {
              "id": "tar_path_overwrite",
              "name": "TarPathOverwrite",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#tar_path_overwrite"
            },
            {
              "id": "express_open_redirect",
              "name": "ExpressOpenRedirect",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#express_open_redirect"
            },
            {
              "id": "express_open_redirect2",
              "name": "ExpressOpenRedirect2",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#express_open_redirect2"
            },
            {
              "id": "shelljs_os_command_exec",
              "name": "ShelljsOsCommandExec",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#shelljs_os_command_exec"
            },
            {
              "id": "generic_os_command_exec",
              "name": "GenericOsCommandExec",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#generic_os_command_exec"
            },
            {
              "id": "generic_os_command_exec2",
              "name": "GenericOsCommandExec2",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#generic_os_command_exec2"
            },
            {
              "id": "node_password",
              "name": "NodePassword",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_password"
            },
            {
              "id": "node_username",
              "name": "NodeUsername",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_username"
            },
            {
              "id": "node_api_key",
              "name": "NodeApiKey",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_api_key"
            },
            {
              "id": "node_secret",
              "name": "NodeSecret",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_secret"
            },
            {
              "id": "node_logic_bypass",
              "name": "NodeLogicBypass",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_logic_bypass"
            },
            {
              "id": "node_error_disclosure",
              "name": "NodeErrorDisclosure",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_error_disclosure"
            },
            {
              "id": "generic_error_disclosure",
              "name": "GenericErrorDisclosure",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#generic_error_disclosure"
            },
            {
              "id": "hardcoded_passport_secret",
              "name": "HardcodedPassportSecret",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#hardcoded_passport_secret"
            },
            {
              "id": "eval_require",
              "name": "EvalRequire",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#eval_require"
            },
            {
              "id": "yaml_deserialize",
              "name": "YamlDeserialize",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#yaml_deserialize"
            },
            {
              "id": "vm_runincontext_injection",
              "name": "VmRunincontextInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#vm_runincontext_injection"
            },
            {
              "id": "vm_runinnewcontext_injection",
              "name": "VmRuninnewcontextInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#vm_runinnewcontext_injection"
            },
            {
              "id": "vm_compilefunction_injection",
              "name": "VmCompilefunctionInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#vm_compilefunction_injection"
            },
            {
              "id": "vm_code_injection",
              "name": "VmCodeInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#vm_code_injection"
            },
            {
              "id": "eval_nodejs",
              "name": "EvalNodejs",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#eval_nodejs"
            },
            {
              "id": "sandbox_code_injection",
              "name": "SandboxCodeInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#sandbox_code_injection"
            },
            {
              "id": "grpc_insecure_connection",
              "name": "GrpcInsecureConnection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#grpc_insecure_connection"
            },
            {
              "id": "serializetojs_deserialize",
              "name": "SerializetojsDeserialize",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#serializetojs_deserialize"
            },
            {
              "id": "node_deserialize",
              "name": "NodeDeserialize",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#node_deserialize"
            },
            {
              "id": "vm2_code_injection",
              "name": "Vm2CodeInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#vm2_code_injection"
            },
            {
              "id": "vm2_context_injection",
              "name": "Vm2ContextInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#vm2_context_injection"
            },
            {
              "id": "server_side_template_injection",
              "name": "ServerSideTemplateInjection",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#server_side_template_injection"
            },
            {
              "id": "electron_disable_websecurity",
              "name": "ElectronDisableWebsecurity",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#electron_disable_websecurity"
            },
            {
              "id": "electron_allow_http",
              "name": "ElectronAllowHttp",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#electron_allow_http"
            },
            {
              "id": "electron_blink_integration",
              "name": "ElectronBlinkIntegration",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#electron_blink_integration"
            },
            {
              "id": "electron_nodejs_integration",
              "name": "ElectronNodejsIntegration",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#electron_nodejs_integration"
            },
            {
              "id": "electron_context_isolation",
              "name": "ElectronContextIsolation",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#electron_context_isolation"
            },
            {
              "id": "electron_experimental_features",
              "name": "ElectronExperimentalFeatures",
              "helpUri": "https://ajinabraham.github.io/nodejsscan/#electron_experimental_features"
            }
          ],
          "version": "0.1.7",
          "informationUri": "https://github.com/ajinabraham/njsscan",
          "semanticVersion": "0.1.7"
        }
      },
      "invocations": [
        {
          "executionSuccessful": true,
          "endTimeUtc": "2020-11-16T08:03:18Z"
        }
      ],
      "results": [
        {
          "message": {
            "text": "Algorithm is set to none for JWT token. This can nullify the integrity of JWT signature."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const jose = require(\"jose\");\nconst { JWK, JWT } = jose;\nconst token = JWT.verify('token-here', JWK.None);"
                  },
                  "endColumn": 49,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_none_algorithm.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let jwt = require(\"jsonwebtoken\");\n    let secret = 'some-secret';\n    jwt.verify('token-here', secret, { algorithms: ['RS256', 'none'] }, function (err, payload) {\n        console.log(payload);\n    });"
                  },
                  "endColumn": 8,
                  "endLine": 12,
                  "startColumn": 5,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_none_algorithm.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
          },
          "ruleId": "node_jwt_none_algorithm",
          "ruleIndex": 0
        },
        {
          "message": {
            "text": "Password is exposed through JWT token payload. This is not encrypted and  the password could be compromised. Do not store passwords in JWT tokens."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const token1 = JWT.sign({ password: 123 }, 'secret', { some: 'params' })"
                  },
                  "endColumn": 77,
                  "endLine": 6,
                  "startColumn": 5,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const payload = { one: 1, two: 2, password: 123 }\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 14,
                  "startColumn": 5,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    let payload;\n    payload = { one: 1, two: 2, password: 123 }\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 23,
                  "startColumn": 5,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const payload = {}\n    payload.password = 123\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 32,
                  "startColumn": 5,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const payload = Object.assign({ password: 'bar' }, { bar: 123 }, { one: 1, two: 2 })\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 40,
                  "startColumn": 5,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    let payload;\n    payload = Object.assign({ password: 'bar' }, { bar: 123 }, { one: 1, two: 2 })\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 49,
                  "startColumn": 5,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const token1 = JWT.sign(Object.assign({ password: 'bar' }, { bar: 123 }, { one: 1, two: 2 }), 'secret', { some: 'params' })"
                  },
                  "endColumn": 128,
                  "endLine": 56,
                  "startColumn": 5,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const token1 = JWT.sign({ user: { password: 123 } }, 'secret', { some: 'params' })"
                  },
                  "endColumn": 87,
                  "endLine": 63,
                  "startColumn": 5,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const payload = { one: 1, two: 2, user: { password: 123 } }\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 71,
                  "startColumn": 5,
                  "startLine": 68
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    let payload;\n    payload = { one: 1, two: 2, user: { password: 123 } }\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 80,
                  "startColumn": 5,
                  "startLine": 76
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const payload = { user: {} }\n    payload.user.password = 123\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 89,
                  "startColumn": 5,
                  "startLine": 85
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const payload = Object.assign({ user: { password: 123 } }, { bar: 123 }, { one: 1, two: 2 })\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 97,
                  "startColumn": 5,
                  "startLine": 94
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    let payload;\n    payload = Object.assign({ user: { password: 123 } }, { bar: 123 }, { one: 1, two: 2 })\n    const token1 = JWT.sign(payload, 'secret', { some: 'params' })"
                  },
                  "endColumn": 67,
                  "endLine": 106,
                  "startColumn": 5,
                  "startLine": 102
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const jose = require('jose')\n    const { JWK, JWT } = jose\n    const token1 = JWT.sign(Object.assign({ user: { password: 123 } }, { bar: 123 }, { one: 1, two: 2 }), 'secret', { some: 'params' })"
                  },
                  "endColumn": 136,
                  "endLine": 113,
                  "startColumn": 5,
                  "startLine": 111
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_credentials.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "jwt_exposed_credentials",
          "ruleIndex": 1
        },
        {
          "message": {
            "text": "The object is passed strictly to jose.JWT.sign(...). Make sure  that sensitive information is not exposed through JWT token payload."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            out.token = $jwt.sign(out, cert, { expiresIn: '1d' });"
                  },
                  "endColumn": 66,
                  "endLine": 42,
                  "startColumn": 25,
                  "startLine": 42
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const token = JWT.sign(user, secret)"
                  },
                  "endColumn": 41,
                  "endLine": 6,
                  "startColumn": 19,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_exposed_data.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3:2017-Sensitive Data Exposure",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "jwt_exposed_data",
          "ruleIndex": 2
        },
        {
          "message": {
            "text": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.get('/protected', jwt({ secret: 'shhhhhhared-secret' }), function (req, res) {"
                  },
                  "endColumn": 60,
                  "endLine": 4,
                  "startColumn": 23,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.get('/protected2', jwt({ secret: hardcodedSecret }), function (req, res) {"
                  },
                  "endColumn": 56,
                  "endLine": 12,
                  "startColumn": 24,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.get('/protected3', jwt(opts), function (req, res) {"
                  },
                  "endColumn": 33,
                  "endLine": 21,
                  "startColumn": 24,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.get('/ok-protected', jwt({ secret: process.env.SECRET }), function (req, res) {"
                  },
                  "endColumn": 61,
                  "endLine": 5,
                  "startColumn": 26,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_not_revoked.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.get('/ok-protected', jwt(opts), function (req, res) {"
                  },
                  "endColumn": 35,
                  "endLine": 13,
                  "startColumn": 26,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_not_revoked.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "jwt_not_revoked",
          "ruleIndex": 3
        },
        {
          "message": {
            "text": "Hardcoded JWT secret was found. Store it properly in an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const jsonwt = require('jsonwebtoken')\nconst jose = require('jose')\nconst { JWK, JWT } = jose\nconst config = require('./config')\n\nconst payload = { foo: 'bar' }\nconst secret = 'shhhhh'\n\nconst secret2 = config.secret\nconst secret3 = process.env.SECRET || 'fallback-secret'\n\n//jsonwebtoken\n//true\nconst token1 = jsonwt.sign(payload, secret)"
                  },
                  "endColumn": 44,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const jsonwt = require('jsonwebtoken')\nconst jose = require('jose')\nconst { JWK, JWT } = jose\nconst config = require('./config')\n\nconst payload = { foo: 'bar' }\nconst secret = 'shhhhh'\n\nconst secret2 = config.secret\nconst secret3 = process.env.SECRET || 'fallback-secret'\n\n//jsonwebtoken\n//true\nconst token1 = jsonwt.sign(payload, secret)\n//true\nconst token2 = jsonwt.sign(payload, 'some-secret')"
                  },
                  "endColumn": 51,
                  "endLine": 17,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const $jwt = require('jsonwebtoken');\n\nconst cert = 'hardcoded-secret';\n\nmodule.exports = (app) => {\n    app.post('/api/login', (req, res) => {\n        app.login(req.body.username, req.body.password).then((out) => {\n            out.token = $jwt.sign(out, cert, { expiresIn: '1d' });\n            res.send(out);\n        }, (err) => {\n            console.error(err);\n            res.status(400).send(err);\n        });\n    });\n};"
                  },
                  "endColumn": 3,
                  "endLine": 49,
                  "startColumn": 1,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const jwt = require('jsonwebtoken')\n\nconst jwtSign = (payload = { id: 1 }) =>\n    jwt.sign(payload, 'hardcoded-secret')\n\nconst jwtVerify = req => () => new Promise((resolve, reject) => {\n    const token = req.headers['x-access-token']\n    if (!token) {\n        resolve(false)\n    }\n    jwt.verify(token, 'hardcoded-secret', (err, decoded) => {\n        if (err) {\n            resolve(false)\n        }\n        resolve(decoded)\n    })\n})"
                  },
                  "endColumn": 3,
                  "endLine": 68,
                  "startColumn": 1,
                  "startLine": 52
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const jwt = require('jsonwebtoken')\n\nconst jwtSign = (payload = { id: 1 }) =>\n    jwt.sign(payload, 'hardcoded-secret')"
                  },
                  "endColumn": 42,
                  "endLine": 55,
                  "startColumn": 1,
                  "startLine": 52
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        let User = require('./user'),\n            jwt = require('jsonwebtoken');\n\n        const express = require('express');\n        let router = express.Router();\n\n        router.post('/signup', (req, res) => {\n            let user = new User({\n                name: req.body.name,\n                password: req.body.password\n            });\n            var token = jwt.sign(user, \"hardcoded-secret\", { expiresIn: 60 * 60 * 10 });\n            res.send({ success: true, token: token });\n        });"
                  },
                  "endColumn": 12,
                  "endLine": 89,
                  "startColumn": 9,
                  "startLine": 76
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const router = require('express').Router(),\n            jwt = require('jsonwebtoken');\n        if (config) {\n            router.route('/register').post((req, res) => {\n                USER.findOne({}).exec((error, user) => {\n                    if (error)\n                        return res.status(400).send({ error: error });\n                    user.save((error, user) => {\n                        if (error) {\n                            return res.status(400).send({ error: error });\n                        } else {\n                            const token = jwt.sign({ id: user._id }, 'hardcoded-secret');\n                            return res.status(201).json({ token: token });\n                        }\n                    });\n                });\n            });\n        }"
                  },
                  "endColumn": 10,
                  "endLine": 116,
                  "startColumn": 9,
                  "startLine": 99
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let jwt = require(\"jsonwebtoken\");\n    let secret = 'some-secret';\n    jwt.verify('token-here', secret, { algorithms: ['RS256', 'none'] }, function (err, payload) {\n        console.log(payload);\n    });"
                  },
                  "endColumn": 8,
                  "endLine": 12,
                  "startColumn": 5,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_none_algorithm.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-798: Use of Hard-coded Credentials"
          },
          "ruleId": "hardcoded_jwt_secret",
          "ruleIndex": 4
        },
        {
          "message": {
            "text": "Hardcoded JWT secret or private key was found. Store it properly in  an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.get('/protected', jwt({ secret: 'shhhhhhared-secret' }), function (req, res) {"
                  },
                  "endColumn": 60,
                  "endLine": 4,
                  "startColumn": 23,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let hardcodedSecret = 'shhhhhhared-secret'\n\napp.get('/protected2', jwt({ secret: hardcodedSecret }), function (req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n});"
                  },
                  "endColumn": 4,
                  "endLine": 15,
                  "startColumn": 1,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let secret = \"hardcode\"\nconst opts = Object.assign({ issuer: 'http://issuer' }, { secret })\n\napp.get('/protected3', jwt(opts), function (req, res) {\n    if (!req.user.admin) return res.sendStatus(401);\n    res.sendStatus(200);\n});"
                  },
                  "endColumn": 4,
                  "endLine": 24,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "jwt_express_hardcoded",
          "ruleIndex": 5
        },
        {
          "message": {
            "text": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.goto(req.foo);"
                  },
                  "endColumn": 29,
                  "endLine": 12,
                  "startColumn": 11,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_playwright.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const newUrl = req.foo.bar;\n    await page.goto(newUrl);"
                  },
                  "endColumn": 29,
                  "endLine": 16,
                  "startColumn": 5,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_playwright.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.setContent(req.foo['bar']);"
                  },
                  "endColumn": 42,
                  "endLine": 28,
                  "startColumn": 11,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_playwright.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.evaluate(`fetch(${req.foo})`);"
                  },
                  "endColumn": 45,
                  "endLine": 41,
                  "startColumn": 11,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_playwright.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.evaluate(x => fetch(x), req.foo.bar);"
                  },
                  "endColumn": 52,
                  "endLine": 54,
                  "startColumn": 11,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_playwright.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-918: Server-Side Request Forgery (SSRF)"
          },
          "ruleId": "playwright_ssrf",
          "ruleIndex": 6
        },
        {
          "message": {
            "text": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities.\n"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const status = await page.property('content', req.get('name'));"
                  },
                  "endColumn": 67,
                  "endLine": 14,
                  "startColumn": 26,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.setContent(req.query.q);"
                  },
                  "endColumn": 39,
                  "endLine": 17,
                  "startColumn": 11,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const status = await page.property('content', req.query.q);"
                  },
                  "endColumn": 63,
                  "endLine": 30,
                  "startColumn": 26,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.setContent(req.body);"
                  },
                  "endColumn": 36,
                  "endLine": 33,
                  "startColumn": 11,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const status = await page.property('content', req.get('name'));"
                  },
                  "endColumn": 71,
                  "endLine": 48,
                  "startColumn": 30,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        await page.setContent(req.query.q);"
                  },
                  "endColumn": 43,
                  "endLine": 51,
                  "startColumn": 15,
                  "startLine": 51
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const status = await page.property('content', req.query.q);"
                  },
                  "endColumn": 67,
                  "endLine": 64,
                  "startColumn": 30,
                  "startLine": 64
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        await page.setContent(req.body);"
                  },
                  "endColumn": 40,
                  "endLine": 67,
                  "startColumn": 15,
                  "startLine": 67
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const status = await page.openUrl(req.params.url, {}, {});"
                  },
                  "endColumn": 66,
                  "endLine": 83,
                  "startColumn": 30,
                  "startLine": 83
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        await page.evaluateJavaScript(req.body.script);"
                  },
                  "endColumn": 55,
                  "endLine": 86,
                  "startColumn": 15,
                  "startLine": 86
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const status = await page.openUrl(req.params.url, {}, {});"
                  },
                  "endColumn": 62,
                  "endLine": 109,
                  "startColumn": 26,
                  "startLine": 109
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.evaluateJavaScript(req.body.script);"
                  },
                  "endColumn": 51,
                  "endLine": 112,
                  "startColumn": 11,
                  "startLine": 112
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_phantomjs.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-918: Server-Side Request Forgery (SSRF)"
          },
          "ruleId": "phantom_ssrf",
          "ruleIndex": 7
        },
        {
          "message": {
            "text": "User controlled URL reached to `wkhtmltoimage` can result in Server Side Request Forgery (SSRF)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    wkhtmltoimage.generate(req.foo, { output: 'vuln.jpg' })"
                  },
                  "endColumn": 60,
                  "endLine": 15,
                  "startColumn": 5,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_wkhtmltoimage.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-918: Server-Side Request Forgery (SSRF)"
          },
          "ruleId": "wkhtmltoimage_ssrf",
          "ruleIndex": 8
        },
        {
          "message": {
            "text": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const url = `https://${req.query.name}`\n    await page.goto(url)"
                  },
                  "endColumn": 25,
                  "endLine": 11,
                  "startColumn": 5,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_puppeteer.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.setContent(`${req.body.foo}`)"
                  },
                  "endColumn": 45,
                  "endLine": 23,
                  "startColumn": 11,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_puppeteer.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');"
                  },
                  "endColumn": 56,
                  "endLine": 36,
                  "startColumn": 5,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_puppeteer.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    await page.evaluateOnNewDocument(`${req.body.foo}`)"
                  },
                  "endColumn": 56,
                  "endLine": 48,
                  "startColumn": 11,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_puppeteer.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const body = req.body.foo;\n    await page.evaluate('alert(' + body + ')');"
                  },
                  "endColumn": 48,
                  "endLine": 61,
                  "startColumn": 5,
                  "startLine": 60
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_puppeteer.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-918: Server-Side Request Forgery (SSRF)"
          },
          "ruleId": "puppeteer_ssrf",
          "ruleIndex": 9
        },
        {
          "message": {
            "text": "User controlled URL in http client libraries can result in Server Side Request Forgery (SSRF)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    request(req.query.name, function (error, response, body) {\n        console.error('error:', error); // Print the error if one occurred\n        console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n        console.log('body:', body); // Print the HTML for the Google homepage.\n    });"
                  },
                  "endColumn": 7,
                  "endLine": 19,
                  "startColumn": 5,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    needle('get', req.vbody.foo).then(res => {"
                  },
                  "endColumn": 33,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    urllib.request(req.foo, function (err, data, res) {\n        if (err) {\n            throw err; // you need to handle error\n        }\n        console.log(res.statusCode);\n        console.log(res.headers);\n        // data is Buffer instance\n        console.log(data.toString());\n    });"
                  },
                  "endColumn": 7,
                  "endLine": 39,
                  "startColumn": 5,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    needle.get(req.foo, function (error, response) {\n        if (!error && response.statusCode == 200)\n            console.log(response.body);\n    });"
                  },
                  "endColumn": 7,
                  "endLine": 49,
                  "startColumn": 5,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    needle.post(req.foo)"
                  },
                  "endColumn": 25,
                  "endLine": 53,
                  "startColumn": 5,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    axios.get(req.foo.bar)"
                  },
                  "endColumn": 27,
                  "endLine": 75,
                  "startColumn": 5,
                  "startLine": 75
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let obj = await getJSON(req.foo);"
                  },
                  "endColumn": 37,
                  "endLine": 90,
                  "startColumn": 21,
                  "startLine": 90
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let buffer = await getBuffer(req.foo);"
                  },
                  "endColumn": 42,
                  "endLine": 92,
                  "startColumn": 24,
                  "startLine": 92
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    fetch(req.post.doo, { method: 'POST', body: 'a=1' })"
                  },
                  "endColumn": 57,
                  "endLine": 95,
                  "startColumn": 5,
                  "startLine": 95
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    client.connect(1337, req.body.host, function () {\n        console.log('Connected');\n        client.write('Hello, server! Love, Client.');\n    });"
                  },
                  "endColumn": 7,
                  "endLine": 119,
                  "startColumn": 5,
                  "startLine": 116
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const fk = http.get({ host: req.foo });"
                  },
                  "endColumn": 43,
                  "endLine": 134,
                  "startColumn": 16,
                  "startLine": 134
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-918: Server-Side Request Forgery (SSRF)"
          },
          "ruleId": "node_ssrf",
          "ruleIndex": 10
        },
        {
          "message": {
            "text": "User controlled URL reached to `wkhtmltopdf` can result in Server Side Request Forgery (SSRF)."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    wkhtmltopdf(req.foo, { output: 'vuln.pdf' })"
                  },
                  "endColumn": 49,
                  "endLine": 15,
                  "startColumn": 5,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/ssrf_wkhtmltopdf.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-918: Server-Side Request Forgery (SSRF)"
          },
          "ruleId": "wkhtmltopdf_ssrf",
          "ruleIndex": 11
        },
        {
          "message": {
            "text": "Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript Injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            const endDate = req.query.end;\n            const query = { $where: \"this.hidden == false\" };\n\n            if (startDate && endDate) {\n                query[\"$where\"] = \"this.start >= new Date('\" + startDate + \"') && \" +\n                    \"this.end <= new Date('\" + endDate + \"') &&\" +\n                    \"this.hidden == false;\";\n            }\n\n            const TimelineItem = await getTimelineItemModel();\n            const timelineItems = await TimelineItem.find(query);"
                  },
                  "endColumn": 65,
                  "endLine": 19,
                  "startColumn": 13,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/nosql_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let username = req.query.username;\nvar query = { $where: `this.username == '${username}'` }\nUser.find(query, function (err, users) {\n    if (err) {\n        // Handle errors\n    } else {\n        res.render('userlookup', { title: 'User Lookup', users: users });\n    }\n});"
                  },
                  "endColumn": 4,
                  "endLine": 38,
                  "startColumn": 1,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/nosql_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    query['$where'] = `this.email == '${req.body.email}'`;\n    User.find(query, function (err, data) {\n        if (err) {\n            res.send(err);\n        } else if (data) {\n            res.send('User Login Successful');\n        } else {\n            res.send('Wrong Username Password Combination');\n        }\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 52,
                  "startColumn": 5,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/nosql_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
          },
          "ruleId": "node_nosqli_js_injection",
          "ruleIndex": 12
        },
        {
          "message": {
            "text": "Untrusted input concatinated with raw SQL query can result in SQL Injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "connection.query(\"SELECT * FROM bank_accounts WHERE dob = '\" + req.body.dob + \"' AND bank_account = '\" + req.body.account_number + \"'\", function (error, results) { });"
                  },
                  "endColumn": 167,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/sqli_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var query = 'SELECT * FROM person WHERE id = \\'' +\n        req.body.input + '\\'';\n    sequelize.query(query, {\n        type: sequelize.QueryTypes.SELECT,\n        model: Foo\n    })\n        .then(function (foo) {\n            res.json({ message: person });\n        })\n        .catch(function (err) {\n            res.json({ message: err.toString() });\n        });"
                  },
                  "endColumn": 12,
                  "endLine": 21,
                  "startColumn": 5,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/sqli_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var employeeId = req.foo;\nvar sql = \"SELECT * FROM trn_employee WHERE employee_id = \" + employeeId;\n\nconnection.query(sql, function (error, results, fields) {\n    if (error) {\n        throw error;\n    }\n    console.log(results);\n});"
                  },
                  "endColumn": 4,
                  "endLine": 42,
                  "startColumn": 1,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/sqli_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    connection.query('SELECT * FROM users WHERE id = ' + req.foo('bar'), (err, res) => { });"
                  },
                  "endColumn": 92,
                  "endLine": 46,
                  "startColumn": 5,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/sqli_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var inp = req.foo[\"id\"];\npgcon.query('SELECT * FROM users WHERE id = ' + inp, (err, res) => { });"
                  },
                  "endColumn": 73,
                  "endLine": 55,
                  "startColumn": 1,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/sqli_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var query1 = \"SELECT FOO,BAR FROM TABLE WHERE CAT='\"\n        + req.foo.bar + \"' ORDER BY FOO\";\n    pool.query(query1, [], function (err, results) {\n    });"
                  },
                  "endColumn": 8,
                  "endLine": 65,
                  "startColumn": 5,
                  "startLine": 62
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/sqli_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          },
          "ruleId": "node_sqli_injection",
          "ruleIndex": 13
        },
        {
          "message": {
            "text": "Untrusted user input in findOne() function can result in NoSQL Injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    query['email'] = req.body.email;\n    User.findOne(query, function (err, data) {\n        if (err) {\n            res.send(err);\n        } else if (data) {\n            res.send('User Login Successful');\n        } else {\n            res.send('Wrong Username Password Combination');\n        }\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 15,
                  "startColumn": 5,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/nosql_find_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    User.findOne({ 'email': req.body.email, 'password': req.body.password }, function (err, data) {\n        if (err) {\n            res.send(err);\n        } else if (data) {\n            res.send('User Login Successful');\n        } else {\n            res.send('Wrong Username Password Combination');\n        }\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 28,
                  "startColumn": 5,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/nosql_find_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-943: Improper Neutralization of Special Elements in Data Query Logic"
          },
          "ruleId": "node_nosqli_injection",
          "ruleIndex": 14
        },
        {
          "message": {
            "text": "MD5 is a a weak hash which is known to have collision. Use a strong hashing function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "require(\"crypto\")\n    .createHash(\"md5\")"
                  },
                  "endColumn": 23,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
          },
          "ruleId": "node_md5",
          "ruleIndex": 15
        },
        {
          "message": {
            "text": "SHA1 is a a weak hash which is known to have collision. Use a strong hashing function."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "require(\"crypto\")\n    .createHash(\"sha1\")"
                  },
                  "endColumn": 24,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
          },
          "ruleId": "node_sha1",
          "ruleIndex": 16
        },
        {
          "message": {
            "text": "AES with ECB mode is deterministic in nature and not suitable for encrypting large amount of repetitive data."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "cipher = crypto.createCipheriv(\"aes-128-ecb\", key, '')"
                  },
                  "endColumn": 55,
                  "endLine": 4,
                  "startColumn": 10,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let cipher = crypto.createCipheriv('aes-256-ecb', Buffer.from(ENCRYPTION_KEY), iv);"
                  },
                  "endColumn": 87,
                  "endLine": 25,
                  "startColumn": 18,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let cipher = crypto.createCipheriv('aes-192-ecb', Buffer.from(ENCRYPTION_KEY), iv);"
                  },
                  "endColumn": 87,
                  "endLine": 27,
                  "startColumn": 18,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let cipher = crypto.createCipheriv('aes-128-ecb', Buffer.from(ENCRYPTION_KEY), iv);"
                  },
                  "endColumn": 87,
                  "endLine": 29,
                  "startColumn": 18,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let decipher = crypto.createDecipheriv('aes-128-ecb', Buffer.from(ENCRYPTION_KEY), iv);"
                  },
                  "endColumn": 91,
                  "endLine": 42,
                  "startColumn": 20,
                  "startLine": 42
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
          },
          "ruleId": "node_aes_ecb",
          "ruleIndex": 17
        },
        {
          "message": {
            "text": "A weak or broken cryptographic algorithm was identified. Using these functions will introduce vulnerabilities or downgrade the security of your application."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var des = crypto.createCipher('des', key);"
                  },
                  "endColumn": 42,
                  "endLine": 53,
                  "startColumn": 11,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
          },
          "ruleId": "node_weak_crypto",
          "ruleIndex": 18
        },
        {
          "message": {
            "text": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "crypto.pseudoRandomBytes(1); // <Buffer 45>"
                  },
                  "endColumn": 28,
                  "endLine": 47,
                  "startColumn": 1,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const val = Math.random();"
                  },
                  "endColumn": 26,
                  "endLine": 50,
                  "startColumn": 13,
                  "startLine": 50
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
          },
          "ruleId": "node_insecure_random_generator",
          "ruleIndex": 19
        },
        {
          "message": {
            "text": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/"
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "if (password == 'mypass') {\n    correct = 1;\n}"
                  },
                  "endColumn": 2,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_timing_attacks.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "if ('test' == password) {\n    correct = 2;\n}"
                  },
                  "endColumn": 2,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_timing_attacks.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "if ('test' === password) {\n    correct = 2;\n}"
                  },
                  "endColumn": 2,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_timing_attacks.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "if (password == test)\n    x = 1;"
                  },
                  "endColumn": 11,
                  "endLine": 22,
                  "startColumn": 1,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_timing_attacks.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        return hash === verify.toString('base64');"
                  },
                  "endColumn": 50,
                  "endLine": 48,
                  "startColumn": 9,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_timing_attacks.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    return token === correctToken;"
                  },
                  "endColumn": 34,
                  "endLine": 55,
                  "startColumn": 5,
                  "startLine": 55
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/crypto_timing_attacks.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-208: Observable Timing Discrepancy"
          },
          "ruleId": "node_timing_attack",
          "ruleIndex": 20
        },
        {
          "message": {
            "text": "Setting 'NODE_TLS_REJECT_UNAUTHORIZED' to 0 will allow node server to accept self signed certificates and is not a secure behaviour."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';"
                  },
                  "endColumn": 58,
                  "endLine": 10,
                  "startColumn": 9,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/tls_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";"
                  },
                  "endColumn": 55,
                  "endLine": 20,
                  "startColumn": 9,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/tls_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-295: Improper Certificate Validation"
          },
          "ruleId": "node_tls_reject",
          "ruleIndex": 21
        },
        {
          "message": {
            "text": "SSL Certificate verification for node-curl is disabled."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    curl(url,\n        {\n            SSL_VERIFYPEER: 0\n        },\n        function (err) {\n            response.end(this.body);\n        })"
                  },
                  "endColumn": 11,
                  "endLine": 54,
                  "startColumn": 5,
                  "startLine": 48
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/tls_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-599: Missing Validation of OpenSSL Certificate"
          },
          "ruleId": "node_curl_ssl_verify_disable",
          "ruleIndex": 22
        },
        {
          "message": {
            "text": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let match = r.test(req.params.id);"
                  },
                  "endColumn": 38,
                  "endLine": 8,
                  "startColumn": 17,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_dos.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var parsedUrl = url.parse(request.url, true);\n    console.timeEnd('benchmark');\n    /^(([a-z])+.)+[A-Z]([a-z])+$/.test(parsedUrl.query);"
                  },
                  "endColumn": 57,
                  "endLine": 25,
                  "startColumn": 5,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_dos.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    /^(([a-z])+.)+[A-Z]([a-z])+$/.test(request.foo);"
                  },
                  "endColumn": 52,
                  "endLine": 31,
                  "startColumn": 5,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_dos.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var y = /^(([a-z])+.)+[A-Z]([a-z])+$/.test(request.foo['bar']);"
                  },
                  "endColumn": 67,
                  "endLine": 34,
                  "startColumn": 13,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_dos.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var myArray = /d(b+)d/g.exec(request.foo.bar);"
                  },
                  "endColumn": 50,
                  "endLine": 41,
                  "startColumn": 19,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_dos.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var re = /(?:\\d{3}|\\(\\d{3}\\))([-\\/\\.])\\d{3}\\1\\d{4}/;\n    var OK = re.exec(request.value);"
                  },
                  "endColumn": 36,
                  "endLine": 47,
                  "startColumn": 5,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_dos.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-185: Incorrect Regular Expression"
          },
          "ruleId": "regex_dos",
          "ruleIndex": 23
        },
        {
          "message": {
            "text": "POST Request to Express Body Parser 'bodyParser()' can create Temporary files and consume space."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(express.bodyParser());"
                  },
                  "endColumn": 33,
                  "endLine": 14,
                  "startColumn": 13,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/express_bodyparser_dos.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A9: Using Components with Known Vulnerabilities",
            "cwe": "CWE-400: Uncontrolled Resource Consumption"
          },
          "ruleId": "express_bodyparser",
          "ruleIndex": 24
        },
        {
          "message": {
            "text": "User controlled data in RegExp() can make the application vulnerable to layer 7 DoS."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var key = req.param(\"key\");\n    // Regex created from user input\n    var re = new RegExp(\"\\\\b\" + key);"
                  },
                  "endColumn": 37,
                  "endLine": 8,
                  "startColumn": 5,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/regex_injection_dos.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-400: Uncontrolled Resource Consumption"
          },
          "ruleId": "regex_injection_dos",
          "ruleIndex": 25
        },
        {
          "message": {
            "text": "Layer7 Denial of Service. Looping over user controlled objects can result in DoS."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    for (var i = 0; i < obj.length; i++) {"
                  },
                  "endColumn": 35,
                  "endLine": 11,
                  "startColumn": 25,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/layer7_object_dos.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    for (var i = 0; i < obj.length; i++) {"
                  },
                  "endColumn": 35,
                  "endLine": 28,
                  "startColumn": 25,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/layer7_object_dos.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-400: Uncontrolled Resource Consumption"
          },
          "ruleId": "layer7_object_dos",
          "ruleIndex": 26
        },
        {
          "message": {
            "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a.readUInt8(0, true)"
                  },
                  "endColumn": 21,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/buffer_noassert.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer"
          },
          "ruleId": "buffer_noassert",
          "ruleIndex": 27
        },
        {
          "message": {
            "text": "Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "a.escapeMarkup = false;"
                  },
                  "endColumn": 23,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_mustache_escape_disabled.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A7: Cross-Site Scripting XSS",
            "cwe": "CWE-116: Improper Encoding or Escaping of Output"
          },
          "ruleId": "xss_disable_mustache_escape",
          "ruleIndex": 28
        },
        {
          "message": {
            "text": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var str = new Buffer(req.cookies.profile, 'base64').toString();\n        // ruleid:node_deserialize\n        var obj = serialize.unserialize(str);\n        // ruleid:serializetojs_deserialize\n        serialize2.deserialize(str);\n        if (obj.username) {\n            res.send(\"Hello \" + escape(obj.username));\n        }"
                  },
                  "endColumn": 10,
                  "endLine": 20,
                  "startColumn": 9,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_deserialize.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const func = require(req.body)\n    return res.send(func())"
                  },
                  "endColumn": 28,
                  "endLine": 21,
                  "startColumn": 5,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const func = require(req.body)\n    return res.send(func())"
                  },
                  "endColumn": 28,
                  "endLine": 29,
                  "startColumn": 5,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const func = require(req.body)\n        return res.send(func())"
                  },
                  "endColumn": 32,
                  "endLine": 36,
                  "startColumn": 9,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const { name } = req.query;\n    res.send('<h1> Hello :' + name + \"</h1>\")"
                  },
                  "endColumn": 46,
                  "endLine": 8,
                  "startColumn": 5,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var user = req.query.name;\n\n    msg = \"Hi \" + user\n    res.send('Response</br>' + msg);"
                  },
                  "endColumn": 37,
                  "endLine": 25,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var user = req.query.name;\n\n    msg = \"Hi \" + user\n    res.send('Response</br>' + msg);"
                  },
                  "endColumn": 37,
                  "endLine": 35,
                  "startColumn": 5,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var user = { user: req.query.name };\n    res.send('Response</br>' + user.name);"
                  },
                  "endColumn": 43,
                  "endLine": 41,
                  "startColumn": 5,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var user = req.query.name;\n    var msg = [];\n    msg.push(user);\n    res.send('Response</br>' + msg[0]);"
                  },
                  "endColumn": 40,
                  "endLine": 49,
                  "startColumn": 5,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var resp = req.query.name;\n    res.send('Response</br>' + resp);"
                  },
                  "endColumn": 38,
                  "endLine": 70,
                  "startColumn": 5,
                  "startLine": 69
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var resp = req.query.name;\n    res.write('Response</br>' + resp);"
                  },
                  "endColumn": 39,
                  "endLine": 75,
                  "startColumn": 5,
                  "startLine": 74
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var resp = req.foo;\n    var x = 1;\n    res.write('Response</br>' + resp);"
                  },
                  "endColumn": 39,
                  "endLine": 82,
                  "startColumn": 5,
                  "startLine": 80
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var html = \"ASadad\" + req.query.name + \"Asdadads\"\n    res.write('Response</br>' + html);"
                  },
                  "endColumn": 39,
                  "endLine": 88,
                  "startColumn": 5,
                  "startLine": 87
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.write('Response</br>' + req.query('doo'));"
                  },
                  "endColumn": 50,
                  "endLine": 92,
                  "startColumn": 5,
                  "startLine": 92
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.write('Response</br>' + req.query.name);"
                  },
                  "endColumn": 48,
                  "endLine": 96,
                  "startColumn": 5,
                  "startLine": 96
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var resp = req.query.name;\n    var html = \"ASadad\" + resp + \"Asdadads\"\n    res.write('Response</br>' + html);"
                  },
                  "endColumn": 39,
                  "endLine": 113,
                  "startColumn": 5,
                  "startLine": 111
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          },
          "ruleId": "express_xss",
          "ruleIndex": 29
        },
        {
          "message": {
            "text": "Untrusted user input reaching `serialize-javascript` with `unsafe` attribute can cause Cross Site Scripting (XSS)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const result = serialize({ foo: userInput }, { unsafe: true, space: 2 })"
                  },
                  "endColumn": 77,
                  "endLine": 5,
                  "startColumn": 20,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_serializejs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const result = serialize({ foo: '<img src=x />' }, { unsafe: true, space: 2 })"
                  },
                  "endColumn": 83,
                  "endLine": 11,
                  "startColumn": 20,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_serializejs.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page"
          },
          "ruleId": "xss_serialize_javascript",
          "ruleIndex": 30
        },
        {
          "message": {
            "text": "Handlebars SafeString will not escape the data passed through it. Untrusted user input passing through SafeString can cause XSS."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var y = new Handlebars.SafeString(x);"
                  },
                  "endColumn": 41,
                  "endLine": 4,
                  "startColumn": 13,
                  "startLine": 4
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_templates.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    return new Handlebars.SafeString('<img src=\"\" onload=alert(0)>');"
                  },
                  "endColumn": 69,
                  "endLine": 6,
                  "startColumn": 12,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_templates.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var xx = z.SafeString(x)"
                  },
                  "endColumn": 29,
                  "endLine": 13,
                  "startColumn": 14,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_templates.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          },
          "ruleId": "handlebars_safestring",
          "ruleIndex": 31
        },
        {
          "message": {
            "text": "Disabling Escaping in Handlebars is not a secure behaviour. This can introduce XSS vulnerabilties."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var template = Handlebars.compile(source, { noEscape: true });"
                  },
                  "endColumn": 62,
                  "endLine": 19,
                  "startColumn": 16,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_templates.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var result = Handlerbars.compile(template, { noEscape: true })({ target: target });"
                  },
                  "endColumn": 63,
                  "endLine": 23,
                  "startColumn": 14,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_templates.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)"
          },
          "ruleId": "handlebars_noescape",
          "ruleIndex": 32
        },
        {
          "message": {
            "text": "Handlebars SafeString will not escape the data passed through it. Untrusted user input passing through SafeString can cause XSS."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "Sqrl.autoEscaping(false)"
                  },
                  "endColumn": 25,
                  "endLine": 25,
                  "startColumn": 1,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xss_templates.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          },
          "ruleId": "squirrelly_autoescape",
          "ruleIndex": 33
        },
        {
          "message": {
            "text": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const xml = req.query.xml\n        const content = xml2json.toJson(xml, { coerce: true, object: true });"
                  },
                  "endColumn": 77,
                  "endLine": 10,
                  "startColumn": 9,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_xml2json.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const content = xml2json.toJson(req.body, { coerce: true, object: true });"
                  },
                  "endColumn": 82,
                  "endLine": 24,
                  "startColumn": 25,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_xml2json.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A4: XML External Entities (XXE)",
            "cwe": "CWE-611: Improper Restriction of XML External Entity Reference"
          },
          "ruleId": "xxe_xml2json",
          "ruleIndex": 34
        },
        {
          "message": {
            "text": "User controlled data in XML parsers can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    libxmljs.parseXml(req.param(\"xml\"), { noent: true });"
                  },
                  "endColumn": 57,
                  "endLine": 7,
                  "startColumn": 5,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const parser = new libxmljs.SaxParser();\n    const x = 1\n    parser.parseString(req.param(\"xml\"));"
                  },
                  "endColumn": 42,
                  "endLine": 16,
                  "startColumn": 5,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const parser = new libxmljs.SaxPushParser();\n    const x = 1\n    parser.push(req.param(\"some-xml\"));"
                  },
                  "endColumn": 40,
                  "endLine": 25,
                  "startColumn": 5,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var products = parser.parseXmlString(req.files.products.data, { noent: true, noblanks: true })"
                  },
                  "endColumn": 99,
                  "endLine": 34,
                  "startColumn": 20,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const XMLfile = req.files.products.data;\n    const products = libxmljs.parseXmlString(XMLfile, { noent: true, noblanks: true })"
                  },
                  "endColumn": 87,
                  "endLine": 45,
                  "startColumn": 5,
                  "startLine": 44
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A4: XML External Entities (XXE)",
            "cwe": "CWE-611: Improper Restriction of XML External Entity Reference"
          },
          "ruleId": "node_xxe",
          "ruleIndex": 35
        },
        {
          "message": {
            "text": "User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like in DoS."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var parser = new expat.Parser();\n    parser.write(req.param(\"xml\"));"
                  },
                  "endColumn": 36,
                  "endLine": 4,
                  "startColumn": 5,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xml_entity_expansion.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A4: XML External Entities (XXE)",
            "cwe": "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')"
          },
          "ruleId": "node_entity_expansion",
          "ruleIndex": 36
        },
        {
          "message": {
            "text": "User controlled data in xpath.parse() can result in XPATH injection vulnerability."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var expr = xpath.parse(\"//persons/user[name/text()='\" + req.param(\"name\") + \"']/details/text()\");"
                  },
                  "endColumn": 101,
                  "endLine": 8,
                  "startColumn": 16,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xpathi_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    expr = xpath.parse(\"//persons/user[name/text()='\" + req.param.name + \"']/details/text()\");"
                  },
                  "endColumn": 94,
                  "endLine": 10,
                  "startColumn": 12,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xpathi_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    expr = xpath.parse(\"//persons/user[name/text()='\" + req[\"name\"] + \"']/details/text()\");"
                  },
                  "endColumn": 91,
                  "endLine": 12,
                  "startColumn": 12,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xpathi_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = req.param;\n    expr = xpath.parse(\"//persons/user[name/text()='\" + foo + \"']/details/text()\");"
                  },
                  "endColumn": 84,
                  "endLine": 15,
                  "startColumn": 5,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xpathi_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')"
          },
          "ruleId": "node_xpath_injection",
          "ruleIndex": 37
        },
        {
          "message": {
            "text": "Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var sax = require(\"sax\"),\n        strict = false,\n        parser = sax.parser(strict);\n\n    parser.onattribute = function (attr) {\n        doSmth(attr)\n    };\n\n    parser.ondoctype = function (dt) {\n        processDocType(dt)\n    }"
                  },
                  "endColumn": 6,
                  "endLine": 13,
                  "startColumn": 5,
                  "startLine": 3
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_sax.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var saxStream = require(\"sax\").createStream(strict, options)\n\n    saxStream.on(\"opentag\", function (node) {\n        // same object as above\n    })\n\n    saxStream.on(\"doctype\", function (node) {\n        processType(node)\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 33,
                  "startColumn": 5,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_sax.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A4: XML External Entities (XXE)",
            "cwe": "CWE-611: Improper Restriction of XML External Entity Reference"
          },
          "ruleId": "xxe_sax",
          "ruleIndex": 38
        },
        {
          "message": {
            "text": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    parser.parse(req.body)"
                  },
                  "endColumn": 27,
                  "endLine": 9,
                  "startColumn": 5,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_expat.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    parser.write(req.query.value)"
                  },
                  "endColumn": 34,
                  "endLine": 16,
                  "startColumn": 5,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_expat.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var data = req.body.foo\n    parser.write(data)"
                  },
                  "endColumn": 23,
                  "endLine": 24,
                  "startColumn": 5,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/xxe_expat.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A4: XML External Entities (XXE)",
            "cwe": "CWE-611: Improper Restriction of XML External Entity Reference"
          },
          "ruleId": "xxe_expat",
          "ruleIndex": 39
        },
        {
          "message": {
            "text": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.options('*', cors())"
                  },
                  "endColumn": 25,
                  "endLine": 6,
                  "startColumn": 1,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-346: Origin Validation Error"
          },
          "ruleId": "generic_cors",
          "ruleIndex": 40
        },
        {
          "message": {
            "text": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var x = '*';\n    //sgrep bug - https://github.com/returntocorp/sgrep/issues/512\n    // ruleid:express_cors\n    res.writeHead(200, { 'Access-Control-Allow-Origin': '*' });\n    // ruleid:express_cors\n    res.set('access-control-allow-origin', '*');\n    //do not match - sgrep bug -rewrite-rule\n    res.set('Access-Control-Allow-Origin', 'google.com');\n    // ruleid:express_cors\n    res.set('Access-Control-Allow-Origin', '*');\n    // ruleid:express_cors\n    res.set({\n        'Content-Length': 123,\n        'access-control-allow-origin': '*',\n        'ETag': '12345'\n    })\n    // ruleid:express_cors\n    res.writeHead(200, { 'Access-Control-Allow-Origin': '*' })\n\n    res.set('access-control-allow-origin', x);"
                  },
                  "endColumn": 47,
                  "endLine": 34,
                  "startColumn": 5,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { 'Access-Control-Allow-Origin': '*' });"
                  },
                  "endColumn": 63,
                  "endLine": 18,
                  "startColumn": 5,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('access-control-allow-origin', '*');"
                  },
                  "endColumn": 48,
                  "endLine": 20,
                  "startColumn": 5,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('Access-Control-Allow-Origin', '*');"
                  },
                  "endColumn": 48,
                  "endLine": 24,
                  "startColumn": 5,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set({\n        'Content-Length': 123,\n        'access-control-allow-origin': '*',\n        'ETag': '12345'\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 30,
                  "startColumn": 5,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { 'Access-Control-Allow-Origin': '*' })"
                  },
                  "endColumn": 63,
                  "endLine": 32,
                  "startColumn": 5,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cors_star.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-346: Origin Validation Error"
          },
          "ruleId": "express_cors",
          "ruleIndex": 41
        },
        {
          "message": {
            "text": "Untrusted user input in response header will result in HTTP Header Injection or Response Splitting Attacks."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            res.writeHead(200, { test: 'foo \\r\\ninvalid: bar' + req.foo });"
                  },
                  "endColumn": 75,
                  "endLine": 6,
                  "startColumn": 13,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            res.writeHead(200, { test: req.foo + 'foo \\ninvalid: bar' });"
                  },
                  "endColumn": 73,
                  "endLine": 10,
                  "startColumn": 13,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            res.writeHead(200, { test: 'foo \\rinvalid: bar' + req.foo + 'asdadasd', foo: bar });"
                  },
                  "endColumn": 96,
                  "endLine": 14,
                  "startColumn": 13,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            res.writeHead(200, { test: bla + 'foo \\n\\n\\ninvalid: bar' + req.foo });"
                  },
                  "endColumn": 83,
                  "endLine": 18,
                  "startColumn": 13,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            res.writeHead(200, { test: bla + 'foo \\n\\n\\ninvalid: bar' + req.foo('asd') });"
                  },
                  "endColumn": 90,
                  "endLine": 22,
                  "startColumn": 13,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "            res.writeHead(200, { test: req.foo });"
                  },
                  "endColumn": 50,
                  "endLine": 26,
                  "startColumn": 13,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { test: 'foo \\r\\ninvalid: bar' + req.foo });"
                  },
                  "endColumn": 67,
                  "endLine": 40,
                  "startColumn": 5,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('Content-Type', req.query.foo);"
                  },
                  "endColumn": 43,
                  "endLine": 43,
                  "startColumn": 5,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('foo', 'asdad' + req.query.foo);"
                  },
                  "endColumn": 44,
                  "endLine": 45,
                  "startColumn": 5,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set(req.query.foo, 'asdadad');"
                  },
                  "endColumn": 38,
                  "endLine": 47,
                  "startColumn": 5,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('asda' + req.query.foo, 'asdadad');"
                  },
                  "endColumn": 47,
                  "endLine": 49,
                  "startColumn": 5,
                  "startLine": 49
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('asda' + req.query[\"foo\"], 'asdadad');"
                  },
                  "endColumn": 50,
                  "endLine": 51,
                  "startColumn": 5,
                  "startLine": 51
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('asda' + req.query(\"foo\"), 'asdadad');"
                  },
                  "endColumn": 50,
                  "endLine": 53,
                  "startColumn": 5,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set({\n        'Content-Type': 'text/plain',\n        'Content-Length': req.query.foo,\n        'ETag': '12345'\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 59,
                  "startColumn": 5,
                  "startLine": 55
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set({\n        'Content-Length': req.query.foo,\n        'x-xss-protection': 0,\n        'ETag': '12345'\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 45,
                  "startColumn": 5,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { location: 'foo \\rinvalid: bar' + req.foo + 'asdadasd', foo: bar });"
                  },
                  "endColumn": 92,
                  "endLine": 67,
                  "startColumn": 5,
                  "startLine": 67
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { 'location': req.foo });"
                  },
                  "endColumn": 48,
                  "endLine": 73,
                  "startColumn": 5,
                  "startLine": 73
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax"
          },
          "ruleId": "generic_header_injection",
          "ruleIndex": 42
        },
        {
          "message": {
            "text": "Consider changing the default session cookie name. An attacker can use it to fingerprint the server and target attacks accordingly."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session(opts))"
                  },
                  "endColumn": 26,
                  "endLine": 19,
                  "startColumn": 13,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "cookie_session_default",
          "ruleIndex": 43
        },
        {
          "message": {
            "text": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session(Object.assign({\n        keys: ['key1', 'key2'],\n        name: 'foo'\n    }, {\n        cookie: {\n            httpOnly: true,\n            sameSite: true,\n            domain: 'example.com',\n            path: 'foo/bar',\n            expires: new Date(Date.now() + 60 * 60 * 1000)\n        }\n    })))"
                  },
                  "endColumn": 8,
                  "endLine": 35,
                  "startColumn": 13,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
          },
          "ruleId": "cookie_session_no_secure",
          "ruleIndex": 44
        },
        {
          "message": {
            "text": "Default session middleware settings: `sameSite` attribute is not configured to strict or lax. These configurations provides protection against Cross Site Request Forgery attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session(opts))"
                  },
                  "endColumn": 26,
                  "endLine": 129,
                  "startColumn": 13,
                  "startLine": 129
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-1275: Sensitive Cookie with Improper SameSite Attribute"
          },
          "ruleId": "cookie_session_no_samesite",
          "ruleIndex": 45
        },
        {
          "message": {
            "text": "Session middleware settings: `httpOnly` is explicitly set to false.  It ensures that sensitive cookies cannot be accessed by client side  JavaScript and helps to protect against cross-site scripting attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session({\n        keys: ['key1', 'key2'],\n        name: 'foo',\n        cookie: {\n            httpOnly: false,\n            secure: true,\n            sameSite: 'lax',\n            domain: 'example.com',\n            path: 'foo/bar',\n            expires: new Date(Date.now() + 60 * 60 * 1000)\n        }\n    }))"
                  },
                  "endColumn": 7,
                  "endLine": 51,
                  "startColumn": 13,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"
          },
          "ruleId": "cookie_session_no_httponly",
          "ruleIndex": 46
        },
        {
          "message": {
            "text": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session(opts))"
                  },
                  "endColumn": 26,
                  "endLine": 71,
                  "startColumn": 13,
                  "startLine": 71
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "cookie_session_no_domain",
          "ruleIndex": 47
        },
        {
          "message": {
            "text": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session(opts))"
                  },
                  "endColumn": 26,
                  "endLine": 93,
                  "startColumn": 13,
                  "startLine": 93
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "cookie_session_no_path",
          "ruleIndex": 48
        },
        {
          "message": {
            "text": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies."
          },
          "level": "note",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    app.use(session(opts))"
                  },
                  "endColumn": 26,
                  "endLine": 110,
                  "startColumn": 13,
                  "startLine": 110
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_cookie.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-613: Insufficient Session Expiration"
          },
          "ruleId": "cookie_session_no_expires",
          "ruleIndex": 49
        },
        {
          "message": {
            "text": "Using untrusted Host header for generating dynamic URLs can result in web cache and or password reset poisoning."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var url = 'http://' + req.host;"
                  },
                  "endColumn": 35,
                  "endLine": 19,
                  "startColumn": 9,
                  "startLine": 19
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var reset = 'https://' + req.host + '/password_reset';"
                  },
                  "endColumn": 58,
                  "endLine": 21,
                  "startColumn": 9,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var pass = \"https://\" + req.host + \"/reset\";"
                  },
                  "endColumn": 48,
                  "endLine": 23,
                  "startColumn": 9,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var z = req.host;\n    var pass = \"https://\" + z + \"/reset\";\n\n    // ruleid:host_header_injection\n    var reset_url = \"Reset password: <a href='http://\" + req.host + \"/reset_pass'>Reset</a>\";\n    // ruleid:host_header_injection\n    var foo = {\n        text: 'password: https://' + req.host + '/token/',\n        token: 'f2131ASDSADASoo',\n    };"
                  },
                  "endColumn": 6,
                  "endLine": 35,
                  "startColumn": 5,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var z = req.host;\n    var pass = \"https://\" + z + \"/reset\";\n\n    // ruleid:host_header_injection\n    var reset_url = \"Reset password: <a href='http://\" + req.host + \"/reset_pass'>Reset</a>\";\n    // ruleid:host_header_injection\n    var foo = {\n        text: 'password: https://' + req.host + '/token/',\n        token: 'f2131ASDSADASoo',\n    };\n\n    // ruleid:host_header_injection\n    var foo = {\n        text: 'reset password: https://' + req['host'] + '/token/',\n        token: 'f2131ASDSADASoo',\n    };\n\n    // ruleid:host_header_injection\n    let x = \"https://\" + req['host'] + \"/reset\" + foo;\n    // ruleid:host_header_injection\n    x = \"https://\" + req(\"host\") + \"/reset\" + foo + 'barr' + foo2;\n\n    // ruleid:host_header_injection\n    var foo = {\n        text: 'reset password: https://' + req.host + '/resettoken/' + foo,\n        token: 'f2131ASDSADASoo',\n    };"
                  },
                  "endColumn": 6,
                  "endLine": 52,
                  "startColumn": 5,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var z = req.host;\n    var pass = \"https://\" + z + \"/reset\";"
                  },
                  "endColumn": 41,
                  "endLine": 27,
                  "startColumn": 5,
                  "startLine": 26
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var reset_url = \"Reset password: <a href='http://\" + req.host + \"/reset_pass'>Reset</a>\";"
                  },
                  "endColumn": 93,
                  "endLine": 30,
                  "startColumn": 9,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = {\n        text: 'password: https://' + req.host + '/token/',\n        token: 'f2131ASDSADASoo',\n    };"
                  },
                  "endColumn": 6,
                  "endLine": 35,
                  "startColumn": 9,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = {\n        text: 'reset password: https://' + req['host'] + '/token/',\n        token: 'f2131ASDSADASoo',\n    };"
                  },
                  "endColumn": 6,
                  "endLine": 41,
                  "startColumn": 9,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let x = \"https://\" + req['host'] + \"/reset\" + foo;"
                  },
                  "endColumn": 54,
                  "endLine": 44,
                  "startColumn": 9,
                  "startLine": 44
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    x = \"https://\" + req(\"host\") + \"/reset\" + foo + 'barr' + foo2;"
                  },
                  "endColumn": 66,
                  "endLine": 46,
                  "startColumn": 5,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = {\n        text: 'reset password: https://' + req.host + '/resettoken/' + foo,\n        token: 'f2131ASDSADASoo',\n    };"
                  },
                  "endColumn": 6,
                  "endLine": 52,
                  "startColumn": 9,
                  "startLine": 49
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/host_header_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-20: Improper Input Validation"
          },
          "ruleId": "host_header_injection",
          "ruleIndex": 50
        },
        {
          "message": {
            "text": "X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.use(lusca({\n    csrf: true,\n    csp: { policy: \"referrer no-referrer\" },\n    xframe: 'SAMEORIGIN',\n    p3p: 'ABCDEF',\n    hsts: { maxAge: 31536000, includeSubDomains: true, preload: true },\n    xssProtection: false,\n    nosniff: true,\n    referrerPolicy: 'same-origin'\n}));"
                  },
                  "endColumn": 3,
                  "endLine": 16,
                  "startColumn": 9,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.use(lusca.xssProtection(false));"
                  },
                  "endColumn": 35,
                  "endLine": 24,
                  "startColumn": 9,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-693: Protection Mechanism Failure"
          },
          "ruleId": "header_xss_lusca",
          "ruleIndex": 51
        },
        {
          "message": {
            "text": "X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var x = 0;\n    // ruleid:header_xss_generic\n    res.writeHead(200, { 'x-xss-protection': 0 });\n\n    // ruleid:header_xss_generic\n    res.set('x-xss-protection', 0);\n    //do not match\n    res.set('x-xss-protection', 1);\n    // ruleid:header_xss_generic\n    res.set('X-XSS-Protection', 0);\n    // ruleid:header_xss_generic\n    res.set({\n        'Content-Length': req.query.foo,\n        'x-xss-protection': 0,\n        'ETag': '12345'\n    })\n    // ruleid:header_xss_generic\n    res.writeHead(200, { 'x-xss-protection': 0 })\n    res.set('X-XSS-Protection', x);"
                  },
                  "endColumn": 36,
                  "endLine": 48,
                  "startColumn": 5,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { 'x-xss-protection': 0 });"
                  },
                  "endColumn": 50,
                  "endLine": 32,
                  "startColumn": 5,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('x-xss-protection', 0);"
                  },
                  "endColumn": 35,
                  "endLine": 35,
                  "startColumn": 5,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set('X-XSS-Protection', 0);"
                  },
                  "endColumn": 35,
                  "endLine": 39,
                  "startColumn": 5,
                  "startLine": 39
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.set({\n        'Content-Length': req.query.foo,\n        'x-xss-protection': 0,\n        'ETag': '12345'\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 45,
                  "startColumn": 5,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { 'x-xss-protection': 0 })"
                  },
                  "endColumn": 50,
                  "endLine": 47,
                  "startColumn": 5,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_xss_protection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-693: Protection Mechanism Failure"
          },
          "ruleId": "header_xss_generic",
          "ruleIndex": 52
        },
        {
          "message": {
            "text": "One or more Security Response header is explicitly disabled in Helmet."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.use(helmet({\n    frameguard: false,\n}))"
                  },
                  "endColumn": 3,
                  "endLine": 4,
                  "startColumn": 9,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_helmet_disabled.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "app.use(helmet({\n    \"xssFilter\": false\n}))"
                  },
                  "endColumn": 3,
                  "endLine": 10,
                  "startColumn": 9,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/header_helmet_disabled.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-693: Protection Mechanism Failure"
          },
          "ruleId": "helmet_feature_disabled",
          "ruleIndex": 53
        },
        {
          "message": {
            "text": "Path constructed with user input can result in Path Traversal. Ensure that user input does not reach `join()` or `resolve()`. "
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var filePath = path.join(__dirname, '/' + req.query.load);"
                  },
                  "endColumn": 62,
                  "endLine": 13,
                  "startColumn": 20,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var extractPath = path.join(opts.path, req.query.path);"
                  },
                  "endColumn": 59,
                  "endLine": 8,
                  "startColumn": 23,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal_join_resolve.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    createFile({ filePath: path.resolve(opts.path, req.body) })"
                  },
                  "endColumn": 61,
                  "endLine": 15,
                  "startColumn": 28,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal_join_resolve.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let somePath = req.body.path;\n    const pth = path.join(opts.path, somePath);"
                  },
                  "endColumn": 47,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal_join_resolve.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory (Path Traversal)"
          },
          "ruleId": "join_resolve_path_traversal",
          "ruleIndex": 54
        },
        {
          "message": {
            "text": "Untrusted user input in readFile()/readFileSync() can endup in Directory Traversal Attacks."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var filePath = path.join(__dirname, '/' + req.query.load);\n    var readStream = fileSystem.createReadStream(filePath);"
                  },
                  "endColumn": 59,
                  "endLine": 14,
                  "startColumn": 5,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    fileSystem.readFile(req.query.foo);"
                  },
                  "endColumn": 39,
                  "endLine": 16,
                  "startColumn": 5,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    console.log(fileSystem.readFileSync(req.query.nar, 'utf8'));"
                  },
                  "endColumn": 63,
                  "endLine": 18,
                  "startColumn": 17,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = req.query.y;\n    fileSystem.readFile(foo);"
                  },
                  "endColumn": 30,
                  "endLine": 21,
                  "startColumn": 5,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = req.query.y;\n    fileSystem.readFile(foo);\n    fileSystem.readFile(foo + \"bar\");"
                  },
                  "endColumn": 38,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var date = req.query.date;\n    var fileName = config.dirName + '/' + date;\n    var downloadFileName = 'log_' + fileName + '.txt';\n\n    fs.readFileAsync(fileName)\n        .then(function (data) {\n            res.download(fileName, downloadFileName);\n        })"
                  },
                  "endColumn": 11,
                  "endLine": 35,
                  "startColumn": 5,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/path_traversal.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-23: Relative Path Traversal"
          },
          "ruleId": "generic_path_traversal",
          "ruleIndex": 55
        },
        {
          "message": {
            "text": "Insecure ZIP archive extraction can result in arbitrary path over write and can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        entry.pipe(fs.createWriteStream(fileName));"
                  },
                  "endColumn": 51,
                  "endLine": 11,
                  "startColumn": 9,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        entry.pipe(fs.writeFileSync(fileName));"
                  },
                  "endColumn": 47,
                  "endLine": 20,
                  "startColumn": 9,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        entry.pipe(fs.createWriteStream(fileName));"
                  },
                  "endColumn": 51,
                  "endLine": 81,
                  "startColumn": 9,
                  "startLine": 81
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          },
          "ruleId": "zip_path_overwrite",
          "ruleIndex": 56
        },
        {
          "message": {
            "text": "Insecure ZIP archive extraction can result in arbitrary path over write and can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        fs.writeFileSync(fileName, entry.contents);"
                  },
                  "endColumn": 51,
                  "endLine": 28,
                  "startColumn": 9,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          },
          "ruleId": "zip_path_overwrite2",
          "ruleIndex": 57
        },
        {
          "message": {
            "text": "Insecure ZIP archive extraction using adm-zip can result in arbitrary path over write and can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "zipEntries.forEach(function (zipEntry) {\n    fs.createWriteStream(zipEntry.entryName);\n});"
                  },
                  "endColumn": 3,
                  "endLine": 40,
                  "startColumn": 1,
                  "startLine": 38
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "zip.getEntries().forEach(function (zipEntry) {\n    fs.writeFileSync(zipEntry.entryName);\n});"
                  },
                  "endColumn": 3,
                  "endLine": 45,
                  "startColumn": 1,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          },
          "ruleId": "admzip_path_overwrite",
          "ruleIndex": 58
        },
        {
          "message": {
            "text": "Insecure TAR archive extraction can result in arbitrary path over write and can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const out = fs.createWriteStream(header.name);"
                  },
                  "endColumn": 50,
                  "endLine": 53,
                  "startColumn": 17,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const out = fs.writeFileSync(header.name);"
                  },
                  "endColumn": 46,
                  "endLine": 63,
                  "startColumn": 17,
                  "startLine": 63
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/archive_path_overwrite.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          },
          "ruleId": "tar_path_overwrite",
          "ruleIndex": 59
        },
        {
          "message": {
            "text": "Untrusted user input in redirect() can result in Open Redirect vulnerability."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(302, req.param(\"target\"));"
                  },
                  "endColumn": 43,
                  "endLine": 22,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(300, req.param);"
                  },
                  "endColumn": 33,
                  "endLine": 28,
                  "startColumn": 5,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(req.param[\"target\"]);"
                  },
                  "endColumn": 38,
                  "endLine": 34,
                  "startColumn": 5,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(req.body.url);"
                  },
                  "endColumn": 31,
                  "endLine": 40,
                  "startColumn": 5,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(\"sdcssf\" + req.param(\"target\"));"
                  },
                  "endColumn": 49,
                  "endLine": 45,
                  "startColumn": 5,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(req.param(\"target\") + \"/asdad\");"
                  },
                  "endColumn": 49,
                  "endLine": 50,
                  "startColumn": 5,
                  "startLine": 50
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var target = req.param(\"target\");\n    // BAD: sanitization doesn't apply here\n    res.redirect(target);"
                  },
                  "endColumn": 26,
                  "endLine": 86,
                  "startColumn": 5,
                  "startLine": 84
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect((req.param('action') && req.param('action') != \"\") ? req.param('action') : \"/google_contacts\")"
                  },
                  "endColumn": 112,
                  "endLine": 92,
                  "startColumn": 5,
                  "startLine": 92
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect(`${req.param(\"target\")}/foo`);"
                  },
                  "endColumn": 47,
                  "endLine": 98,
                  "startColumn": 5,
                  "startLine": 98
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect([req.query.page, '?section=', req.query.section].join(''));"
                  },
                  "endColumn": 76,
                  "endLine": 104,
                  "startColumn": 5,
                  "startLine": 104
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect('/' + req.params.user); // BAD - could go to //evil.com"
                  },
                  "endColumn": 40,
                  "endLine": 119,
                  "startColumn": 5,
                  "startLine": 119
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect('//' + req.params.user); // BAD - could go to //evil.com"
                  },
                  "endColumn": 41,
                  "endLine": 121,
                  "startColumn": 5,
                  "startLine": 121
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect('u' + req.params.user); // BAD - could go to u.evil.com"
                  },
                  "endColumn": 40,
                  "endLine": 123,
                  "startColumn": 5,
                  "startLine": 123
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect('Fan999' + req.params.user); // BAD - could go to Fan999.evil.com"
                  },
                  "endColumn": 45,
                  "endLine": 125,
                  "startColumn": 5,
                  "startLine": 125
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.redirect('/' + ('/u' + req.params.user)); // BAD - could go to //u.evil.com,"
                  },
                  "endColumn": 49,
                  "endLine": 127,
                  "startColumn": 5,
                  "startLine": 127
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
          },
          "ruleId": "express_open_redirect",
          "ruleIndex": 60
        },
        {
          "message": {
            "text": "Untrusted user input in response header('Location') can result in Open Redirect vulnerability."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.header(\"Location\", req.param[\"target\"]);"
                  },
                  "endColumn": 48,
                  "endLine": 55,
                  "startColumn": 5,
                  "startLine": 55
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.header('Location', req.param(\"foo\"));"
                  },
                  "endColumn": 45,
                  "endLine": 61,
                  "startColumn": 5,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { location: 'foo \\rinvalid: bar' + req.foo + 'asdadasd', foo: bar });"
                  },
                  "endColumn": 92,
                  "endLine": 67,
                  "startColumn": 5,
                  "startLine": 67
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.writeHead(200, { 'location': req.foo });"
                  },
                  "endColumn": 48,
                  "endLine": 73,
                  "startColumn": 5,
                  "startLine": 73
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    res.header('location', req.param(\"bar\"));"
                  },
                  "endColumn": 45,
                  "endLine": 79,
                  "startColumn": 5,
                  "startLine": 79
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/open_redirect.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
          },
          "ruleId": "express_open_redirect2",
          "ruleIndex": 61
        },
        {
          "message": {
            "text": "User controlled data in 'shelljs.exec()' can result in Remote OS Command Execution."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    return shell.exec(req.query, { silent: true })"
                  },
                  "endColumn": 51,
                  "endLine": 7,
                  "startColumn": 12,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_shelljs.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const input = `ls ${req.query}`\n    return shell.exec(input, { silent: true })"
                  },
                  "endColumn": 47,
                  "endLine": 13,
                  "startColumn": 5,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_shelljs.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          },
          "ruleId": "shelljs_os_command_exec",
          "ruleIndex": 62
        },
        {
          "message": {
            "text": "User controlled data in 'child_process.exec()' can result in Remote OS Command Execution."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    child_process.exec(\n        req.query.file_path,\n        function (err, data) {\n            console.log('err: ', err)\n            console.log('data: ', data);\n        });"
                  },
                  "endColumn": 11,
                  "endLine": 36,
                  "startColumn": 5,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    child_process.exec('gzip' +\n        req.query.file_path,\n        function (err, data) {\n            console.log('err: ', err)\n            console.log('data: ', data);\n        });"
                  },
                  "endColumn": 11,
                  "endLine": 44,
                  "startColumn": 5,
                  "startLine": 39
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    child_process.exec('foobar' +\n        req.query.file_path + \"asdD\",\n        function (err, data) {\n            console.log('err: ', err)\n            console.log('data: ', data);\n        });"
                  },
                  "endColumn": 11,
                  "endLine": 52,
                  "startColumn": 5,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    child_process.exec(\n        req.query.file_path + \"asdD\",\n        function (err, data) {\n            console.log('err: ', err)\n            console.log('data: ', data);\n        });"
                  },
                  "endColumn": 11,
                  "endLine": 60,
                  "startColumn": 5,
                  "startLine": 55
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    child_process.execSync(\n        req.query.file_path + 'rsync -avAXz --info=progress2 \"/src\" \"/dest\"',\n        { stdio: 'inherit' });"
                  },
                  "endColumn": 30,
                  "endLine": 73,
                  "startColumn": 5,
                  "startLine": 71
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var foo = req.query.ping;\n    var x;\n    child_process.exec('ping -c 2 ' + foo, function (err, data) {\n        response.end();\n    });"
                  },
                  "endColumn": 8,
                  "endLine": 83,
                  "startColumn": 5,
                  "startLine": 79
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    exe.exec('ls ' + req.body.dir, function (err, data) {\n        if (!err) {\n            res.json({ message: data });\n        } else {\n            res.status(500).json({ message: err });\n        }\n    });"
                  },
                  "endColumn": 7,
                  "endLine": 101,
                  "startColumn": 5,
                  "startLine": 95
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var parsedUrl = url.parse(request.url, true);\n    exe.exec('ping -c 2 ' + parsedUrl.query.ping, function (err, data) {\n        response.end();\n    });"
                  },
                  "endColumn": 8,
                  "endLine": 115,
                  "startColumn": 5,
                  "startLine": 112
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          },
          "ruleId": "generic_os_command_exec",
          "ruleIndex": 63
        },
        {
          "message": {
            "text": "User controlled data in 'child_process.exec()' can result in Remote OS Command Execution."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    exec(`${req.body.url}`, (error) => {\n        if (error) {\n            return res.send('error');\n        }\n        res.send('pong')\n    })"
                  },
                  "endColumn": 7,
                  "endLine": 12,
                  "startColumn": 5,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    exec(\n        'gzip ' + req.query.file_path,\n        function (err, data) {\n            console.log('err: ', err)\n            console.log('data: ', data);\n            res.send('done');\n        });"
                  },
                  "endColumn": 11,
                  "endLine": 24,
                  "startColumn": 5,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/exec_os_command.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
          },
          "ruleId": "generic_os_command_exec2",
          "ruleIndex": 64
        },
        {
          "message": {
            "text": "A hardcoded password in plain text is identified. Store it properly in an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "password = '1212';"
                  },
                  "endColumn": 18,
                  "endLine": 2,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "PASSWORD = '12211';"
                  },
                  "endColumn": 19,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj['password'] = '121233';"
                  },
                  "endColumn": 27,
                  "endLine": 16,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj2.password = '1234';"
                  },
                  "endColumn": 23,
                  "endLine": 18,
                  "startColumn": 1,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj2.pass = '1234';"
                  },
                  "endColumn": 19,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj2[\"pass\"] = '1234';"
                  },
                  "endColumn": 22,
                  "endLine": 22,
                  "startColumn": 1,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const password = '1212';"
                  },
                  "endColumn": 24,
                  "endLine": 25,
                  "startColumn": 7,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let password = '1212';"
                  },
                  "endColumn": 22,
                  "endLine": 27,
                  "startColumn": 5,
                  "startLine": 27
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var password = '1212';"
                  },
                  "endColumn": 22,
                  "endLine": 29,
                  "startColumn": 5,
                  "startLine": 29
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-798: Use of Hard-coded Credentials"
          },
          "ruleId": "node_password",
          "ruleIndex": 65
        },
        {
          "message": {
            "text": "A hardcoded username in plain text is identified. Store it properly in an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "username = 'ajin-test-user'"
                  },
                  "endColumn": 28,
                  "endLine": 8,
                  "startColumn": 1,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-798: Use of Hard-coded Credentials"
          },
          "ruleId": "node_username",
          "ruleIndex": 66
        },
        {
          "message": {
            "text": "A hardcoded API Key is identified. Store it properly in an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "angular.module('starter.services', []).constant('api_key', '6e906986c3b199c51fff3154cfb76979')"
                  },
                  "endColumn": 95,
                  "endLine": 32,
                  "startColumn": 1,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "x.config('APIKEY', 'asdsdadsada')"
                  },
                  "endColumn": 34,
                  "endLine": 37,
                  "startColumn": 1,
                  "startLine": 37
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "api_key = \"213123123123\";"
                  },
                  "endColumn": 25,
                  "endLine": 39,
                  "startColumn": 1,
                  "startLine": 39
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "api[\"apikey\"] = \"asddadasddad\""
                  },
                  "endColumn": 31,
                  "endLine": 41,
                  "startColumn": 1,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj('APIKEY') = 'asdasdsadasdad'"
                  },
                  "endColumn": 33,
                  "endLine": 43,
                  "startColumn": 1,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj('api_key') = 'asdasdsadasdad'"
                  },
                  "endColumn": 34,
                  "endLine": 45,
                  "startColumn": 1,
                  "startLine": 45
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj('Api_Key') = 'asdasdsadasdad'"
                  },
                  "endColumn": 34,
                  "endLine": 47,
                  "startColumn": 1,
                  "startLine": 47
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-798: Use of Hard-coded Credentials"
          },
          "ruleId": "node_api_key",
          "ruleIndex": 67
        },
        {
          "message": {
            "text": "A hardcoded secret is identified. Store it properly in an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const secret = 'shhhhh'"
                  },
                  "endColumn": 24,
                  "endLine": 8,
                  "startColumn": 7,
                  "startLine": 8
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let hardcodedSecret = 'shhhhhhared-secret'"
                  },
                  "endColumn": 43,
                  "endLine": 10,
                  "startColumn": 5,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let secret = \"hardcode\""
                  },
                  "endColumn": 24,
                  "endLine": 18,
                  "startColumn": 5,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_jwt_express.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        this.jwt_secret = 'HARDCODED-SECRET'"
                  },
                  "endColumn": 45,
                  "endLine": 14,
                  "startColumn": 9,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var FACEBOOK_APP_SECRET = \"HARDCODED-SECRET\";"
                  },
                  "endColumn": 45,
                  "endLine": 34,
                  "startColumn": 5,
                  "startLine": 34
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let secretz = 'HARDCODED-SECRET';"
                  },
                  "endColumn": 37,
                  "endLine": 66,
                  "startColumn": 9,
                  "startLine": 66
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "opts.secretOrKey = 'hardcoded-secret';"
                  },
                  "endColumn": 38,
                  "endLine": 110,
                  "startColumn": 1,
                  "startLine": 110
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "aws('secret', 'asdasdadasddd')"
                  },
                  "endColumn": 31,
                  "endLine": 35,
                  "startColumn": 1,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "secret = \"Asdadasdasdda\""
                  },
                  "endColumn": 25,
                  "endLine": 49,
                  "startColumn": 1,
                  "startLine": 49
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "obj.secret = \"Asdadasdasddsa\""
                  },
                  "endColumn": 30,
                  "endLine": 51,
                  "startColumn": 1,
                  "startLine": 51
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_secrets.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    let secret = 'some-secret';"
                  },
                  "endColumn": 31,
                  "endLine": 9,
                  "startColumn": 9,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/jwt_none_algorithm.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-798: Use of Hard-coded Credentials"
          },
          "ruleId": "node_secret",
          "ruleIndex": 68
        },
        {
          "message": {
            "text": "User controlled data is used for application business logic decision making. This expose protected data or functionality."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    if (req.cookies[\"user\"] === req.params[\"id\"]) {"
                  },
                  "endColumn": 49,
                  "endLine": 6,
                  "startColumn": 9,
                  "startLine": 6
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/logic_user_controlled_checks.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A5: Broken Access Control",
            "cwe": "CWE-807: Reliance on Untrusted Inputs in a Security Decision"
          },
          "ruleId": "node_logic_bypass",
          "ruleIndex": 69
        },
        {
          "message": {
            "text": "Error messages with stack traces can expose sensitive information about the application."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        res.end(err.stack);"
                  },
                  "endColumn": 27,
                  "endLine": 9,
                  "startColumn": 9,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/error_info_disclosure.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-209: Generation of Error Message Containing Sensitive Information"
          },
          "ruleId": "node_error_disclosure",
          "ruleIndex": 70
        },
        {
          "message": {
            "text": "Error messages with stack traces may expose sensitive information about the application."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "try {\n    throw new Error(\"Something unexpected has occurred.\");\n} catch (e) {\n    console.error(e);\n}"
                  },
                  "endColumn": 2,
                  "endLine": 20,
                  "startColumn": 1,
                  "startLine": 16
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/error_info_disclosure.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "console.trace(\"baad\")"
                  },
                  "endColumn": 22,
                  "endLine": 23,
                  "startColumn": 1,
                  "startLine": 23
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/error_info_disclosure.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A3: Sensitive Data Exposure",
            "cwe": "CWE-209: Generation of Error Message Containing Sensitive Information"
          },
          "ruleId": "generic_error_disclosure",
          "ruleIndex": 71
        },
        {
          "message": {
            "text": "Hardcoded plain text secret used for Passport Strategy. Store it properly in an environment variable."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const Strat = require(\"passport-jwt\").Strategy;\nconsole.log(\"words\");\nvar x = new Strat({ secretOrKey: \"secret\" });"
                  },
                  "endColumn": 45,
                  "endLine": 4,
                  "startColumn": 1,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var JwtStrategy = require('passport-jwt').Strategy\n        this.jwt_secret = 'HARDCODED-SECRET'\n\n        passport.use(new JwtStrategy({\n            secretOrKey: this.jwt_secret\n        }, function (payload, done) {\n            // auth callback\n        }))"
                  },
                  "endColumn": 12,
                  "endLine": 20,
                  "startColumn": 9,
                  "startLine": 13
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var FacebookStrategy = require('passport-facebook').Strategy;\nvar FACEBOOK_APP_SECRET = \"HARDCODED-SECRET\";\n\n\nmodule.exports = function (req, res) {\n\n    passport.use(new FacebookStrategy({\n        clientID: FACEBOOK_APP_ID,\n        clientSecret: FACEBOOK_APP_SECRET,\n        callbackURL: URLcallback + '/api/auth/facebook/callback'\n    },\n        function (accessToken, refreshToken, profile, done) {\n            // do something\n        }\n    ));\n};"
                  },
                  "endColumn": 3,
                  "endLine": 48,
                  "startColumn": 1,
                  "startLine": 33
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "let JwtStrategy = require('passport-jwt').Strategy;\nlet ExtractJwt = require('passport-jwt').ExtractJwt;\n\n/**\n *\n * @param {object} options\n * @param {object} options.logger\n * @param {object} options.jwtConfig\n * @returns {object}\n */\nmodule.exports = (options) => {\n    let jwtConfig = options.jwtConfig;\n    let logger = options.logger;\n    let secretz = 'HARDCODED-SECRET';\n\n    this.passportOptions = {\n        jwtFromRequest: ExtractJwt.fromHeader(jwtConfig.headerKey),\n        secretOrKey: secretz,\n        issuer: jwtConfig.issuer,\n        audience: jwtConfig.audience\n    };\n    passport.use(new JwtStrategy(this.passportOptions, (jwt_payload, done) => {\n        // do something\n    }));\n    return passport.authenticate('jwt', { session: false })\n};"
                  },
                  "endColumn": 3,
                  "endLine": 78,
                  "startColumn": 1,
                  "startLine": 53
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const FacebookStrategy = require('passport-facebook').Strategy;\n\nexports.init = function (passport, router, config) {\n\n    passport.use(\n        new FacebookStrategy(\n            {\n                clientID: config.appId,\n                clientSecret: 'HARDCODED-SECRET',\n                callbackURL: config.publicAddress + config.callbackURL,\n                enableProof: false,\n                passReqToCallback: true,\n            },\n            function (req, accessToken, refreshToken, profile, done) {\n                // do something\n            },\n        ),\n    );\n};"
                  },
                  "endColumn": 3,
                  "endLine": 100,
                  "startColumn": 1,
                  "startLine": 82
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var JwtStrategy = require('passport-jwt').Strategy,\n    ExtractJwt = require('passport-jwt').ExtractJwt;\n\nvar opts = {}\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = 'hardcoded-secret';\nopts.issuer = 'accounts.examplesoft.com';\nopts.audience = 'yoursite.net';\npassport.use(new JwtStrategy(opts, function (jwt_payload, done) {\n    User.findOnez({ id: jwt_payload.sub }, function (err, user) {\n        if (err) {\n            return done(err, false);\n        }\n        if (user) {\n            return done(null, user);\n        } else {\n            return done(null, false);\n            // or you could create a new account\n        }\n    });\n}));"
                  },
                  "endColumn": 5,
                  "endLine": 125,
                  "startColumn": 1,
                  "startLine": 105
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var FacebookStrategy = require('passport-facebook').Strategy\n\npassport.use(new FacebookStrategy({\n    clientID: FACEBOOK_APP_ID,\n    clientSecret: \"hardcoded-secret\",\n    callbackURL: \"http://localhost:3000/auth/facebook/callback\"\n},\n    function (accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ facebookId: profile.id }, function (err, user) {\n            return cb(err, user);\n        });\n    }\n));"
                  },
                  "endColumn": 4,
                  "endLine": 140,
                  "startColumn": 1,
                  "startLine": 128
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var GoogleStrategy = require('passport-google-oauth2').Strategy;\n\npassport.use(new GoogleStrategy({\n    clientID: GOOGLE_CLIENT_ID,\n    clientSecret: 'hardcoded-secret',\n    callbackURL: \"http://yourdormain:3000/auth/google/callback\",\n    passReqToCallback: true\n},\n    function (request, accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ googleId: profile.id }, function (err, user) {\n            return done(err, user);\n        });\n    }\n));"
                  },
                  "endColumn": 4,
                  "endLine": 156,
                  "startColumn": 1,
                  "startLine": 143
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var TwitterStrategy = require('passport-twitter').Strategy;\n\npassport.use(new TwitterStrategy({\n    consumerKey: TWITTER_CONSUMER_KEY,\n    consumerSecret: \"hardcoded-secret\",\n    callbackURL: \"http://127.0.0.1:3000/auth/twitter/callback\"\n},\n    function (token, tokenSecret, profile, cb) {\n        User.findOrCreate({ twitterId: profile.id }, function (err, user) {\n            return cb(err, user);\n        });\n    }\n));"
                  },
                  "endColumn": 4,
                  "endLine": 171,
                  "startColumn": 1,
                  "startLine": 159
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var GoogleStrategy = require('passport-google-oauth1').Strategy;\n\npassport.use(new GoogleStrategy({\n    consumerKey: 'www.example.com',\n    consumerSecret: 'hardcoded-secret',\n    callbackURL: \"http://127.0.0.1:3000/auth/google/callback\"\n},\n    function (token, tokenSecret, profile, cb) {\n        User.findOrCreate({ googleId: profile.id }, function (err, user) {\n            return cb(err, user);\n        });\n    }\n));"
                  },
                  "endColumn": 4,
                  "endLine": 186,
                  "startColumn": 1,
                  "startLine": 174
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var Auth0Strategy = require('passport-auth0').Strategy;\n\nvar strategy = new Auth0Strategy({\n    domain: 'your-domain.auth0.com',\n    clientID: 'your-client-id',\n    clientSecret: 'hardcoded-secret',\n    callbackURL: '/callback'\n},\n    function (accessToken, refreshToken, extraParams, profile, done) {\n        return done(null, profile);\n    }\n);"
                  },
                  "endColumn": 2,
                  "endLine": 200,
                  "startColumn": 1,
                  "startLine": 189
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var OAuth1Strategy = require('passport-oauth1').Strategy;\n\npassport.use(new OAuth1Strategy({\n    requestTokenURL: 'https://www.example.com/oauth/request_token',\n    accessTokenURL: 'https://www.example.com/oauth/access_token',\n    userAuthorizationURL: 'https://www.example.com/oauth/authorize',\n    consumerKey: EXAMPLE_CONSUMER_KEY,\n    consumerSecret: \"hardcoded-secret\",\n    callbackURL: \"http://127.0.0.1:3000/auth/example/callback\",\n    signatureMethod: \"RSA-SHA1\"\n},\n    function (token, tokenSecret, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n            return cb(err, user);\n        });\n    }\n));"
                  },
                  "endColumn": 4,
                  "endLine": 221,
                  "startColumn": 1,
                  "startLine": 205
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var OAuth2Strategy = require('passport-oauth2').Strategy;\n\npassport.use(new OAuth2Strategy({\n    authorizationURL: 'https://www.example.com/oauth2/authorize',\n    tokenURL: 'https://www.example.com/oauth2/token',\n    clientID: EXAMPLE_CLIENT_ID,\n    clientSecret: \"hardcoded-secret\",\n    callbackURL: \"http://localhost:3000/auth/example/callback\"\n},\n    function (accessToken, refreshToken, profile, cb) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n            return cb(err, user);\n        });\n    }\n));"
                  },
                  "endColumn": 4,
                  "endLine": 238,
                  "startColumn": 1,
                  "startLine": 224
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/hardcoded_passport.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A2: Broken Authentication",
            "cwe": "CWE-522: Insufficiently Protected Credentials"
          },
          "ruleId": "hardcoded_passport_secret",
          "ruleIndex": 72
        },
        {
          "message": {
            "text": "Untrusted user input in `require()` function allows an attacker to load arbitrary code."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        require(req.query.controllerFullPath)(req, res);"
                  },
                  "endColumn": 46,
                  "endLine": 10,
                  "startColumn": 9,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const func = require(req.body)"
                  },
                  "endColumn": 35,
                  "endLine": 20,
                  "startColumn": 18,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const func = require(req.body)"
                  },
                  "endColumn": 35,
                  "endLine": 28,
                  "startColumn": 18,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        const func = require(req.body)"
                  },
                  "endColumn": 39,
                  "endLine": 35,
                  "startColumn": 22,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_require.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-706: Use of Incorrectly-Resolved Name or Reference"
          },
          "ruleId": "eval_require",
          "ruleIndex": 73
        },
        {
          "message": {
            "text": "User controlled data in 'yaml.load()' function can result in Remote Code Injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "require('js-yaml').load(untrusted_code) + ''"
                  },
                  "endColumn": 40,
                  "endLine": 5,
                  "startColumn": 1,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_yaml_deserialize.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "yaml.load(untrusted_code)"
                  },
                  "endColumn": 26,
                  "endLine": 12,
                  "startColumn": 1,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_yaml_deserialize.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "yaml2.load(untrusted_code)"
                  },
                  "endColumn": 27,
                  "endLine": 14,
                  "startColumn": 1,
                  "startLine": 14
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_yaml_deserialize.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A8: Insecure Deserialization",
            "cwe": "CWE-502: Deserialization of Untrusted Data"
          },
          "ruleId": "yaml_deserialize",
          "ruleIndex": 74
        },
        {
          "message": {
            "text": "Untrusted user input in `vm.runInContext()` can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var input = req.query.something || ''\n    var sandbox = {\n        foo: input\n    }\n    vm.createContext(sandbox)\n    vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
                  },
                  "endColumn": 76,
                  "endLine": 10,
                  "startColumn": 5,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var sandbox = {\n        foo: req.query.userInput\n    }\n    vm.createContext(sandbox)\n    vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
                  },
                  "endColumn": 76,
                  "endLine": 21,
                  "startColumn": 5,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "vm_runincontext_injection",
          "ruleIndex": 75
        },
        {
          "message": {
            "text": "Untrusted user input in `vm.runInNewContext()` can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var input = req.query.something || ''\n    var sandbox = {\n        foo: input\n    }\n    vm.runInNewContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
                  },
                  "endColumn": 79,
                  "endLine": 32,
                  "startColumn": 5,
                  "startLine": 28
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var sandbox = {\n        foo: req.query.userInput\n    }\n    vm.runInNewContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })"
                  },
                  "endColumn": 79,
                  "endLine": 43,
                  "startColumn": 5,
                  "startLine": 40
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "vm_runinnewcontext_injection",
          "ruleIndex": 76
        },
        {
          "message": {
            "text": "Untrusted user input in `vm.compileFunction()` can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const context = vm.createContext({ name: req.query.userInput })\n    let code = `return 'hello ' name`\n    const fn = vm.compileFunction(code, [], { parsingContext: context })"
                  },
                  "endColumn": 73,
                  "endLine": 71,
                  "startColumn": 5,
                  "startLine": 69
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "vm_compilefunction_injection",
          "ruleIndex": 77
        },
        {
          "message": {
            "text": "Untrusted user input reaching `vm` can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const code = `\n        var x = ${req.query.userInput};\n    `\n    vm.runInThisContext(code)"
                  },
                  "endColumn": 30,
                  "endLine": 53,
                  "startColumn": 5,
                  "startLine": 50
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const code = `return 'hello ' + ${req.query.userInput}`\n    let fn = vm.compileFunction(code, [], { parsingContext })"
                  },
                  "endColumn": 62,
                  "endLine": 62,
                  "startColumn": 5,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const script = new vm.Script(`\n        function add(a, b) {\n          return a + ${req.query.userInput};\n        }\n\n        const x = add(1, 2);\n    `);"
                  },
                  "endColumn": 7,
                  "endLine": 83,
                  "startColumn": 20,
                  "startLine": 77
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "vm_code_injection",
          "ruleIndex": 78
        },
        {
          "message": {
            "text": "User controlled data in eval() or similar functions may result in Server Side Injection or Remote Code Injection"
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var resp = eval(\"(\" + req.query.name + \")\");"
                  },
                  "endColumn": 48,
                  "endLine": 5,
                  "startColumn": 16,
                  "startLine": 5
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var z = new Function('arg1', 'arg2', req.query.name)"
                  },
                  "endColumn": 57,
                  "endLine": 7,
                  "startColumn": 13,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    setTimeout('alert(' + req.body.name, 0);"
                  },
                  "endColumn": 44,
                  "endLine": 10,
                  "startColumn": 5,
                  "startLine": 10
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_node.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    setInterval(req.body.name, 0);"
                  },
                  "endColumn": 34,
                  "endLine": 12,
                  "startColumn": 5,
                  "startLine": 12
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_node.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
          },
          "ruleId": "eval_nodejs",
          "ruleIndex": 79
        },
        {
          "message": {
            "text": "Unrusted data in `sandbox` can result in code injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    s.run('lol(' + req.query.userInput + ')', cb);"
                  },
                  "endColumn": 50,
                  "endLine": 15,
                  "startColumn": 5,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_sandbox.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var code = 'lol(' + req.query.userInput + ')'\n    s.run(code, cb);"
                  },
                  "endColumn": 21,
                  "endLine": 23,
                  "startColumn": 5,
                  "startLine": 22
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_sandbox.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    s.run(`lol(${req.query.userInput})`, cb);"
                  },
                  "endColumn": 45,
                  "endLine": 30,
                  "startColumn": 5,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_sandbox.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "sandbox_code_injection",
          "ruleIndex": 80
        },
        {
          "message": {
            "text": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could  tamper with the gRPC message, which could compromise the machine."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var client = new booksProto.books.BookService('127.0.0.1:50051', grpc.credentials.createInsecure());"
                  },
                  "endColumn": 104,
                  "endLine": 7,
                  "startColumn": 18,
                  "startLine": 7
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_grpc_insecure.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    var creds = someFunc() || credentials.createInsecure();\n\n    var client = new Client('127.0.0.1:50051', creds);"
                  },
                  "endColumn": 54,
                  "endLine": 23,
                  "startColumn": 5,
                  "startLine": 21
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_grpc_insecure.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    server.bind('0.0.0.0:50051', grpc.ServerCredentials.createInsecure());"
                  },
                  "endColumn": 74,
                  "endLine": 43,
                  "startColumn": 5,
                  "startLine": 43
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_grpc_insecure.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A8: Insecure Deserialization",
            "cwe": "CWE-502: Deserialization of Untrusted Data"
          },
          "ruleId": "grpc_insecure_connection",
          "ruleIndex": 81
        },
        {
          "message": {
            "text": "User controlled data in 'unserialize()' or 'deserialize()' function can result in Object Injection or Remote Code Injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        serialize2.deserialize(str);"
                  },
                  "endColumn": 36,
                  "endLine": 17,
                  "startColumn": 9,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_deserialize.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "require('serialize-to-js').deserialize(str);"
                  },
                  "endColumn": 44,
                  "endLine": 31,
                  "startColumn": 1,
                  "startLine": 31
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_deserialize.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A8: Insecure Deserialization",
            "cwe": "CWE-502: Deserialization of Untrusted Data"
          },
          "ruleId": "serializetojs_deserialize",
          "ruleIndex": 82
        },
        {
          "message": {
            "text": "User controlled data in 'unserialize()' or 'deserialize()' function can result in Object Injection or Remote Code Injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var obj = serialize.unserialize(str);"
                  },
                  "endColumn": 45,
                  "endLine": 15,
                  "startColumn": 19,
                  "startLine": 15
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_deserialize.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A8: Insecure Deserialization",
            "cwe": "CWE-502: Deserialization of Untrusted Data"
          },
          "ruleId": "node_deserialize",
          "ruleIndex": 83
        },
        {
          "message": {
            "text": "Untrusted user input reaching `vm2` can result in code injection."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    code = `\n    console.log(${req.query.input})\n  `;\n\n    const sandbox = {\n        setTimeout,\n        fs: {\n            watch: fs.watch\n        }\n    };\n\n    new VM({\n        timeout: 40 * 1000,\n        sandbox\n    }).run(code);"
                  },
                  "endColumn": 18,
                  "endLine": 25,
                  "startColumn": 5,
                  "startLine": 11
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm2_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    nodeVM.run('console.log(' + req.query.input + ')')"
                  },
                  "endColumn": 55,
                  "endLine": 41,
                  "startColumn": 5,
                  "startLine": 41
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm2_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const script = new VMScript(`console.log(${req.query.input})`)\n    nodeVM.run(script)"
                  },
                  "endColumn": 23,
                  "endLine": 57,
                  "startColumn": 5,
                  "startLine": 56
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm2_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "vm2_code_injection",
          "ruleIndex": 84
        },
        {
          "message": {
            "text": "Untrusted user input reaching `vm2` sandbox can result in context injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const sandbox = {\n        setTimeout,\n        watch: req.query.input\n    };\n\n    return new VM({ timeout: 40 * 1000, sandbox }).run(code);"
                  },
                  "endColumn": 61,
                  "endLine": 74,
                  "startColumn": 5,
                  "startLine": 69
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm2_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "    const sandbox = {\n        setTimeout,\n        input: req.body\n    };\n\n    const nodeVM = new NodeVM({ timeout: 40 * 1000, sandbox });"
                  },
                  "endColumn": 63,
                  "endLine": 84,
                  "startColumn": 5,
                  "startLine": 79
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/eval_vm2_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "vm2_context_injection",
          "ruleIndex": 85
        },
        {
          "message": {
            "text": "Untrusted user input in templating engine's compile() function can result in Remote Code Execution via server side template injection."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var template = handlebars.compile(source + req.foo);"
                  },
                  "endColumn": 60,
                  "endLine": 18,
                  "startColumn": 24,
                  "startLine": 18
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/server_side_template_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        handlebars.compile(source + req.foo.bar);"
                  },
                  "endColumn": 49,
                  "endLine": 20,
                  "startColumn": 9,
                  "startLine": 20
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/server_side_template_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var temp = myTemplate + req.foo['bar']\n        var compiled = Sqrl.Compile(temp)"
                  },
                  "endColumn": 42,
                  "endLine": 26,
                  "startColumn": 9,
                  "startLine": 25
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/server_side_template_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var xx = source.replace('<!-->', req.foo)\n        handlebars.compile(xx)"
                  },
                  "endColumn": 31,
                  "endLine": 31,
                  "startColumn": 9,
                  "startLine": 30
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/server_side_template_injection.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "        var x = source + req.foo;\n        var z = 2;\n        handlebars.compile(x);"
                  },
                  "endColumn": 31,
                  "endLine": 37,
                  "startColumn": 9,
                  "startLine": 35
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/server_side_template_injection.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A1: Injection",
            "cwe": "CWE-94: Improper Control of Generation of Code (Code Injection)"
          },
          "ruleId": "server_side_template_injection",
          "ruleIndex": 86
        },
        {
          "message": {
            "text": "Disabling webSecurity will disable the same-origin policy and allows the execution of insecure code from any domain."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        webSecurity: false\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 6,
                  "startColumn": 20,
                  "startLine": 2
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const config = {\n    webPreferences: {\n        webSecurity: false\n    }\n}"
                  },
                  "endColumn": 2,
                  "endLine": 13,
                  "startColumn": 1,
                  "startLine": 9
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var x = new BrowserWindow({\n    webPreferences: {\n        webSecurity: false,\n        allowRunningInsecureContent: true\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 29,
                  "startColumn": 9,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-346: Origin Validation Error"
          },
          "ruleId": "electron_disable_websecurity",
          "ruleIndex": 87
        },
        {
          "message": {
            "text": "Application can load content over HTTP and that makes the app vulnerable to Man in the middle attacks."
          },
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        allowRunningInsecureContent: true\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 21,
                  "startColumn": 20,
                  "startLine": 17
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "var x = new BrowserWindow({\n    webPreferences: {\n        webSecurity: false,\n        allowRunningInsecureContent: true\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 29,
                  "startColumn": 9,
                  "startLine": 24
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            },
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        allowRunningInsecureContent: true\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 43,
                  "startColumn": 20,
                  "startLine": 39
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-319: Cleartext Transmission of Sensitive Information"
          },
          "ruleId": "electron_allow_http",
          "ruleIndex": 88
        },
        {
          "message": {
            "text": "Blink's expirimental features are enabled in this application. Some of the features may affect the security of the application."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        enableBlinkFeatures: 'ExecCommandInJavaScript'\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 36,
                  "startColumn": 20,
                  "startLine": 32
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-272: Least Privilege Violation"
          },
          "ruleId": "electron_blink_integration",
          "ruleIndex": 89
        },
        {
          "message": {
            "text": "Node integration exposes node.js APIs to the electron app and this can introduce remote code execution vulnerabilities to the application if the app is vulnerable to Cross Site Scripting (XSS)."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        nodeIntegration: true,\n        nodeIntegrationInWorker: true\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 51,
                  "startColumn": 20,
                  "startLine": 46
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-272: Least Privilege Violation"
          },
          "ruleId": "electron_nodejs_integration",
          "ruleIndex": 90
        },
        {
          "message": {
            "text": "Disabling context isolation can introduce Prototype Pollution vulnerabilities."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        contextIsolation: false,\n        preload: path.join(app.getAppPath(), 'preload.js')\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 59,
                  "startColumn": 20,
                  "startLine": 54
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-693: Protection Mechanism Failure"
          },
          "ruleId": "electron_context_isolation",
          "ruleIndex": 91
        },
        {
          "message": {
            "text": "Experimental features are not expected to be in production ready applications."
          },
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "snippet": {
                    "text": "const mainWindow = new BrowserWindow({\n    webPreferences: {\n        experimentalFeatures: true\n    }\n})"
                  },
                  "endColumn": 3,
                  "endLine": 65,
                  "startColumn": 20,
                  "startLine": 61
                },
                "artifactLocation": {
                  "uri": "tests/assets/node_source/true_positives/security_electron.js"
                }
              }
            }
          ],
          "properties": {
            "owasp": "A6: Security Misconfiguration",
            "cwe": "CWE-272: Least Privilege Violation"
          },
          "ruleId": "electron_experimental_features",
          "ruleIndex": 92
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}